/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package lowerbound;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.OutputStreamWriter;
import java.io.Writer;
import java.util.Arrays;
import java.util.Random;
import javax.swing.JFileChooser;
import static lowerbound.form.NULL_EDGE;

/**
 *
 * @author luca
 */
public class Settings extends javax.swing.JFrame {

    int num_city;
    double alfaStart;
    double alfaMin;
    int num_iterazioni_LB;
    int num_iterazioni_Alfa; //iterazioni prima che cali alfa se il lower bound non è migliorato
    double userUpperBound = 0;
    Vertex[] vertici; //vettore di vertici
    int[][] cost; //matrice dei costi (grafo completo)
    int NUM_VERTICI;
    int SCREEN_WIDTH;
    int SCREEN_HEIGHT;    
    int num_iter_lbDebug = 0;    
    int init_dimension_pool = 1000000;
    int tetto = 0;
    /**
     * Creates new form Settings
     */
    public Settings(int SCREEN_WIDTH, int SCREEN_HEIGHT) {
        super("Settings");
        initComponents();
        this.SCREEN_WIDTH = SCREEN_WIDTH;
        this.SCREEN_HEIGHT = SCREEN_HEIGHT;
    }
    
    public boolean isDebug()
    {
        return chkLBDebug.isSelected();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        TxtNumCity = new javax.swing.JTextField();
        LblCurrentInstance = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        TxtAlfaStart = new javax.swing.JTextField();
        ChkUB = new javax.swing.JCheckBox();
        TxtUB = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        TxtIterLB = new javax.swing.JTextField();
        BtnParameters = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        TxtAlfaMin = new javax.swing.JTextField();
        chkLBDebug = new javax.swing.JCheckBox();
        TxtAlfaIter = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        TxtIterLBDebug = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        TxtInitPool = new javax.swing.JTextField();
        chkTettoStati = new javax.swing.JCheckBox();
        txtTettoStati = new javax.swing.JTextField();
        jMenuBar1 = new javax.swing.JMenuBar();
        MenuFile = new javax.swing.JMenu();
        MenuOpen = new javax.swing.JMenuItem();
        MenuGenerate = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        MenuRisolviIstanze = new javax.swing.JMenu();
        MenuUlisse16 = new javax.swing.JMenuItem();
        MenuUlisse22 = new javax.swing.JMenuItem();
        MenuGR17 = new javax.swing.JMenuItem();
        MenuGR21 = new javax.swing.JMenuItem();
        MenuGR24 = new javax.swing.JMenuItem();
        MenuGr48 = new javax.swing.JMenuItem();
        MenuFri26 = new javax.swing.JMenuItem();
        MenuAtt48 = new javax.swing.JMenuItem();
        MenuBurma14 = new javax.swing.JMenuItem();
        MenuBayg29 = new javax.swing.JMenuItem();
        MenuBays29 = new javax.swing.JMenuItem();
        MenuDantzig42 = new javax.swing.JMenuItem();
        MenuVediDati = new javax.swing.JMenu();
        MenuIstanzaUlisse16 = new javax.swing.JMenuItem();
        MenuIstanzaUlisse22 = new javax.swing.JMenuItem();
        MenuIstanzaGr17 = new javax.swing.JMenuItem();
        MenuIstanzaGr21 = new javax.swing.JMenuItem();
        MenuIstanzaGr24 = new javax.swing.JMenuItem();
        MenuIstanzaGr48 = new javax.swing.JMenuItem();
        MenuIstanzaFr26 = new javax.swing.JMenuItem();
        MenuIstanzaAtt48 = new javax.swing.JMenuItem();
        MenuIstanzaBurma14 = new javax.swing.JMenuItem();
        MenuIstanzaBayg29 = new javax.swing.JMenuItem();
        MenuIstanza29 = new javax.swing.JMenuItem();
        MenuIstanzaDantzig42 = new javax.swing.JMenuItem();
        MenuRef = new javax.swing.JMenuItem();

        jMenu2.setText("jMenu2");

        jMenuItem1.setText("jMenuItem1");

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setText("Numero città:");

        TxtNumCity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        TxtNumCity.setText("10");

        LblCurrentInstance.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        LblCurrentInstance.setText("Istanza corrente: ");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Alfa Start:");

        TxtAlfaStart.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        ChkUB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        ChkUB.setText("UpperBound:");

        TxtUB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Num. Iterazioni LowerBound:");

        TxtIterLB.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        BtnParameters.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        BtnParameters.setText("Inserisci Parametri");
        BtnParameters.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BtnParametersActionPerformed(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel7.setText("Alfa Minimo:");

        TxtAlfaMin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        chkLBDebug.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        chkLBDebug.setText("Fermati Al LowerBound (Num iterazioni Stampa Debug)");
        chkLBDebug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkLBDebugActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Num. Iterazioni Alfa");

        TxtIterLBDebug.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel2.setText("Dimensione Pool Stati");

        chkTettoStati.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        chkTettoStati.setText("Variante con un tetto massimo di stati");
        chkTettoStati.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkTettoStatiActionPerformed(evt);
            }
        });

        MenuFile.setText("File");
        MenuFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        MenuOpen.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MenuOpen.setText("Apri Istanza");
        MenuOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuOpenActionPerformed(evt);
            }
        });
        MenuFile.add(MenuOpen);

        MenuGenerate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MenuGenerate.setText("Genera Istanza");
        MenuGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGenerateActionPerformed(evt);
            }
        });
        MenuFile.add(MenuGenerate);

        jMenuBar1.add(MenuFile);

        jMenu1.setText("TSPlib");
        jMenu1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        MenuRisolviIstanze.setText("Risolvi Istanze");
        MenuRisolviIstanze.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        MenuUlisse16.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuUlisse16.setText("Ulisse 16");
        MenuUlisse16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuUlisse16ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuUlisse16);

        MenuUlisse22.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuUlisse22.setText("Ulisse 22");
        MenuUlisse22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuUlisse22ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuUlisse22);

        MenuGR17.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuGR17.setText("Groetschel 17");
        MenuGR17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGR17ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuGR17);

        MenuGR21.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuGR21.setText("Groetschel 21");
        MenuGR21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGR21ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuGR21);

        MenuGR24.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuGR24.setText("Groetschel 24");
        MenuGR24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGR24ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuGR24);

        MenuGr48.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuGr48.setText("Groetschel 48");
        MenuGr48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuGr48ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuGr48);

        MenuFri26.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuFri26.setText("Fricker 26");
        MenuFri26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuFri26ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuFri26);

        MenuAtt48.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuAtt48.setText("Att 48");
        MenuAtt48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuAtt48ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuAtt48);

        MenuBurma14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuBurma14.setText("Burma 14");
        MenuBurma14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBurma14ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuBurma14);

        MenuBayg29.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuBayg29.setText("Bayg 29");
        MenuBayg29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBayg29ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuBayg29);

        MenuBays29.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuBays29.setText("Bays 29");
        MenuBays29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuBays29ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuBays29);

        MenuDantzig42.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuDantzig42.setText("Dantzig 42");
        MenuDantzig42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuDantzig42ActionPerformed(evt);
            }
        });
        MenuRisolviIstanze.add(MenuDantzig42);

        jMenu1.add(MenuRisolviIstanze);

        MenuVediDati.setText("Vedi  Istanze");
        MenuVediDati.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N

        MenuIstanzaUlisse16.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaUlisse16.setText("Ulisse 16");
        MenuIstanzaUlisse16.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaUlisse16ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaUlisse16);

        MenuIstanzaUlisse22.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaUlisse22.setText("Ulisse 22");
        MenuIstanzaUlisse22.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaUlisse22ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaUlisse22);

        MenuIstanzaGr17.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaGr17.setText("Groetschel 17");
        MenuIstanzaGr17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaGr17ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaGr17);

        MenuIstanzaGr21.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaGr21.setText("Groetschel 21");
        MenuIstanzaGr21.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaGr21ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaGr21);

        MenuIstanzaGr24.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaGr24.setText("Groetschel 24");
        MenuIstanzaGr24.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaGr24ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaGr24);

        MenuIstanzaGr48.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaGr48.setText("Groetschel 48");
        MenuIstanzaGr48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaGr48ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaGr48);

        MenuIstanzaFr26.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaFr26.setText("Fricker 26");
        MenuIstanzaFr26.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaFr26ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaFr26);

        MenuIstanzaAtt48.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaAtt48.setText("Att 48");
        MenuIstanzaAtt48.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaAtt48ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaAtt48);

        MenuIstanzaBurma14.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaBurma14.setText("Burma 14");
        MenuIstanzaBurma14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaBurma14ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaBurma14);

        MenuIstanzaBayg29.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaBayg29.setText("Bayg 29");
        MenuIstanzaBayg29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaBayg29ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaBayg29);

        MenuIstanza29.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanza29.setText("Bays 29");
        MenuIstanza29.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanza29ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanza29);

        MenuIstanzaDantzig42.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuIstanzaDantzig42.setText("Dantzig 42");
        MenuIstanzaDantzig42.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuIstanzaDantzig42ActionPerformed(evt);
            }
        });
        MenuVediDati.add(MenuIstanzaDantzig42);

        jMenu1.add(MenuVediDati);

        MenuRef.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        MenuRef.setText("Riferimenti");
        MenuRef.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MenuRefActionPerformed(evt);
            }
        });
        jMenu1.add(MenuRef);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(LblCurrentInstance, javax.swing.GroupLayout.PREFERRED_SIZE, 800, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BtnParameters)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ChkUB)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel1))
                                .addGap(98, 98, 98)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(TxtAlfaStart, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(TxtUB, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(TxtNumCity, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(chkLBDebug))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel8))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(TxtIterLB, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TxtAlfaIter, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(TxtAlfaMin, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(TxtIterLBDebug, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(64, 64, 64)
                        .addComponent(TxtInitPool, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(chkTettoStati)
                        .addGap(18, 18, 18)
                        .addComponent(txtTettoStati, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(LblCurrentInstance, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(22, 22, 22))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(TxtNumCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(TxtAlfaStart, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TxtUB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ChkUB))
                        .addGap(14, 14, 14)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(chkLBDebug)
                            .addComponent(TxtIterLBDebug, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(TxtAlfaMin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TxtAlfaIter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(TxtIterLB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(35, 35, 35)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TxtInitPool, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkTettoStati)
                    .addComponent(txtTettoStati, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(44, 44, 44)
                .addComponent(BtnParameters)
                .addContainerGap(143, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BtnParametersActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BtnParametersActionPerformed
        try
        {
            num_city = Integer.parseInt(TxtNumCity.getText());
            
            //legge alfa start (di partenza)
            alfaStart = Double.parseDouble(TxtAlfaStart.getText());
            alfaMin = Double.parseDouble(TxtAlfaMin.getText());
            //legge numero iterazioni da fare nel calcolo del LowerBound
            num_iterazioni_LB = Integer.parseInt(TxtIterLB.getText());
            num_iterazioni_Alfa = Integer.parseInt(TxtAlfaIter.getText());
            init_dimension_pool = Integer.parseInt(TxtInitPool.getText());
            
            //legge eventuale UpperBound (altrimenti lo calcola da solo)
            if(ChkUB.isSelected())
            {
                userUpperBound = Double.parseDouble(TxtUB.getText());
            }
            else
            {
                userUpperBound = 0;
            }
            
            if(chkLBDebug.isSelected())
            {
                num_iter_lbDebug = Integer.parseInt(TxtIterLBDebug.getText());
            }
            else
            {
                num_iter_lbDebug = 0;
            }            
            
            if(chkTettoStati.isSelected())
            {
                tetto = Integer.parseInt(txtTettoStati.getText());
            }
            else
            {
                tetto = 0;
            }
        }
        catch(Exception ex)
        {
            //log("[Errore] Inserisci numeri positivi in input \r\n" + ex.getMessage());
        }
        this.setVisible(false);
    }//GEN-LAST:event_BtnParametersActionPerformed

    private void MenuOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuOpenActionPerformed

        TSP_Instance instance = OpenInstance();
        vertici = instance.vertici;
        cost = instance.c;

    }//GEN-LAST:event_MenuOpenActionPerformed

    private void MenuGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGenerateActionPerformed

        //setto parametri dell'istanza del tsp:
        try
        {
            NUM_VERTICI = Integer.parseInt(TxtNumCity.getText());
        }
        catch (Exception ex)
        {
            System.out.println("Inserisci un numero intero positivo");
        }

        //genera vertici con coordinate
        vertici = generateVertexes();

        //matrice dei costi (quadrata)
        cost = getCosts(vertici);

        SaveInstance(vertici, cost);

    }//GEN-LAST:event_MenuGenerateActionPerformed

    private void MenuUlisse16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuUlisse16ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 16;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI];                
        
        double[] coord_x = {
                                        38.24,
                                        39.57,
                                        40.56 ,
                                        36.26 ,
                                        33.48 ,
                                        37.56 ,
                                        38.42 ,
                                        37.52 ,
                                        41.23 ,
                                        41.17 ,
                                        36.08 ,
                                        38.47 ,
                                        38.15 ,
                                        37.51 ,
                                        35.49 ,
                                        39.36
                                            };
        
        double[] coord_y = {
                                    20.42,
                                    26.15,
                                    25.32,
                                    23.12,
                                    10.54,
                                    12.19,
                                    13.11,
                                    20.44,
                                    9.10,
                                    13.05,
                                    -5.21,
                                    15.13,
                                    15.35,
                                    15.17,
                                    14.32,
                                    19.56        
                                           };
        
        TSPLibInstanceCoordinateGeo(coord_x, coord_y);
        
        
        /*
        String matrix = "1 509 501 312 1019 736 656 60 1039 726 2314 479 448 479 619 150 509 1 126 474 1526 1226 1133 532 1449 1122 2789 958 941 978 1127 542 501 126 1 541 1516 1184 1084 536 1371 1045 2728 913 904 946 1115 499 312 474 541 1 1157 980 919 271 1333 1029 2553 751 704 720 783 455 1019 1526 1516 1157 1 478 583 996 858 855 1504 677 651 600 401 1033 736 1226 1184 980 478 1 115 740 470 379 1581 271 289 261 308 687 656 1133 1084 919 583 115 1 667 455 288 1661 177 216 207 343 592 60 532 536 271 996 740 667 1 1066 759 2320 493 454 479 598 206 1039 1449 1371 1333 858 470 455 1066 1 328 1387 591 650 656 776 933 726 1122 1045 1029 855 379 288 759 328 1 1697 333 400 427 622 610 2314 2789 2728 2553 1504 1581 1661 2320 1387 1697 1 1838 1868 1841 1789 2248 479 958 913 751 677 271 177 493 591 333 1838 1 68 105 336 417 448 941 904 704 651 289 216 454 650 400 1868 68 1 52 287 406 479 978 946 720 600 261 207 479 656 427 1841 105 52 1 237 449 619 1127 1115 783 401 308 343 598 776 622 1789 336 287 237 1 636 150 542 499 455 1033 687 592 206 933 610 2248 417 406 449 636 1";

        cost = GetFullMatrix(matrix, " ");
        */
        
                LblCurrentInstance.setText("Istanza corrente: TSPlib, Ulisse 16 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));
    }//GEN-LAST:event_MenuUlisse16ActionPerformed

    private void MenuUlisse22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuUlisse22ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 22;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI];        
        
        double[] coord_x = {
38.24, 
39.57,
40.56 ,
36.26 ,
33.48 ,
37.56 ,
38.42 ,
37.52 ,
41.23 ,
41.17 ,
36.08 ,
38.47 ,
38.15 ,
37.51 ,
35.49 ,
39.36 ,
38.09 ,
36.09 ,
40.44 ,
40.33 ,
40.37 ,
37.57    
                                            };
        
        double[] coord_y = {
20.42,
26.15,
25.32,
23.12,
10.54,
12.19,
13.11,
20.44,
9.10,
 13.05,
 -5.21,
 15.13,
 15.35,
 15.17,
 14.32,
 19.56,
 24.36,
 23.00,
 13.57,
 14.15,
 14.23,
 22.56       
                                           };
        
        TSPLibInstanceCoordinateGeo(coord_x, coord_y);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Ulisse 22 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));        
        
    }//GEN-LAST:event_MenuUlisse22ActionPerformed

    private void MenuGR17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGR17ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 17;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        int[] lower_diagonal_matrix = {
 0, 633, 0, 257, 390, 0, 91, 661, 228, 0, 412, 227,
 169, 383, 0, 150, 488, 112, 120, 267, 0, 80, 572, 196,
 77, 351, 63, 0, 134, 530, 154, 105, 309, 34, 29, 0,
 259, 555, 372, 175, 338, 264, 232, 249, 0, 505, 289, 262,
 476, 196, 360, 444, 402, 495, 0, 353, 282, 110, 324, 61,
 208, 292, 250, 352, 154, 0, 324, 638, 437, 240, 421, 329,
 297, 314, 95, 578, 435, 0, 70, 567, 191, 27, 346, 83,
 47, 68, 189, 439, 287, 254, 0, 211, 466, 74, 182, 243,
 105, 150, 108, 326, 336, 184, 391, 145, 0, 268, 420, 53,
 239, 199, 123, 207, 165, 383, 240, 140, 448, 202, 57, 0,
 246, 745, 472, 237, 528, 364, 332, 349, 202, 685, 542, 157,
 289, 426, 483, 0, 121, 518, 142, 84, 297, 35, 29, 36,
 236, 390, 238, 301, 55, 96, 153, 336, 0 
                                            };       
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Groetschel 17 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));                
    }//GEN-LAST:event_MenuGR17ActionPerformed

    private void MenuGR21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGR21ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 21;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        int[] lower_diagonal_matrix = {
     0,    510 ,    0   ,635   ,355  ,   0    ,91   ,415    ,605   ,  0       ,     
   385,   585,   390 ,  350 ,    0 ,  155  , 475,   495 ,  120 ,  240    ,        
     0,    110 ,  480  , 570  ,  78 ,  320  ,  96 ,    0   ,130   ,500        ,    
   540,    97 ,  285   , 36    ,29  ,   0   ,490   ,605   ,295   ,460         ,   
   120,   350 ,  425  , 390  ,   0 ,  370 ,  320  , 700 ,  280 ,  590        ,    
   365,   350,   370  , 625  ,   0 ,  155 ,  380  , 640 ,   63  , 430          ,  
   200,   160 ,  175  , 535 ,  240,     0 ,   68   ,440  , 575  ,  27            ,
   320,    91  ,  48   , 67   ,430  , 300  ,  90    , 0   ,610   ,360            ,
   705,   520 ,  835 ,  605 ,  590,   610 ,  865 ,  250,   480,   545        ,    
     0,    655  , 235   ,585  , 555 ,  750  , 615  , 625 ,  645  , 775          ,  
   285,   515 ,  585  , 190 ,    0  , 480   , 81   ,435   ,380   ,575            ,
   440,   455 ,  465 ,  600 ,  245,   345  , 415 ,  295 ,  170  ,   0            ,
   265,   480 ,  420  , 235 ,  125,   125 ,  200 ,  165 ,  230   ,475           , 
   310,   205  , 715  , 650 ,  475,     0  , 255  , 440  , 755   ,235            ,
   650,   370  , 320  , 350 ,  680,   150,   175,   265,   400  , 435           , 
   385,   485  ,   0  , 450  , 270  , 625  , 345  , 660  , 430   ,420            ,
   440,   690  ,  77 ,  310 ,  380 ,  180 ,  215 ,  190 ,  545  , 225            ,
     0  ,  170  , 445  , 750 ,  160 ,  495 ,  265 ,  220 ,  240  , 600            ,
   235 ,  125 ,  170,   485,   525,   405,   375,    87 ,  315  ,   0            ,
   240 ,  290  , 590,   140 ,  480,   255,   205,   220,   515 ,  150           , 
   100 ,  170  , 390 ,  425,   255,   395,   205,   220,   155  ,   0            ,
   380 ,  140   ,495 ,  280,   480,   340 ,  350,   370,   505   ,185           , 
   240 ,  310   ,345,   280,   105,   380,   280,   165 ,  305   ,150            ,
     0            
                                            };       
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Groetschel 21 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));           
        
    }//GEN-LAST:event_MenuGR21ActionPerformed

    private void MenuGR24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGR24ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 24;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        int[] lower_diagonal_matrix = {

 0 ,257, 0, 187, 196, 0, 91 ,228, 158, 0 ,150 ,112,
 96, 120 ,0 ,80 ,196 ,88, 77 ,63, 0, 130 ,167, 59,
 101, 56 ,25, 0 ,134 ,154, 63 ,105, 34 ,29, 22, 0,
 243 ,209, 286, 159, 190, 216, 229, 225, 0, 185 ,86, 124,
 156 ,40 ,124 ,95 ,82, 207, 0 ,214, 223 ,49, 185 ,123,
 115 ,86, 90 ,313 ,151, 0 ,70 ,191, 121 ,27 ,83, 47,
 64 ,68 ,173 ,119 ,148, 0 ,272 ,180, 315 ,188, 193, 245,
 258, 228 ,29 ,159 ,342 ,209 ,0, 219, 83, 172, 149 ,79,
 139 ,134 ,112 ,126 ,62 ,199 ,153, 97 ,0 ,293, 50 ,232,
 264 ,148, 232 ,203 ,190 ,248, 122, 259 ,227, 219 ,134, 0,
 54 ,219 ,92, 82, 119, 31 ,43 ,58,238, 147 ,84, 53,
 267, 170, 255 ,0 ,211 ,74 ,81, 182, 105 ,150, 121 ,108,
 310 ,37 ,160 ,145 ,196, 99 ,125, 173 ,0, 290 ,139 ,98,
 261 ,144, 176, 164, 136, 389, 116, 147 ,224, 275 ,178, 154,
 190 ,79 ,0 ,268, 53 ,138 ,239, 123 ,207 ,178, 165 ,367,
 86 ,187 ,202, 227 ,130 ,68 ,230, 57, 86, 0 ,261, 43,
 200, 232, 98, 200, 171 ,131 ,166, 90, 227 ,195 ,137, 69,
 82 ,223 ,90 ,176, 90 ,0 ,175, 128 ,76, 146, 32 ,76,
 47, 30 ,222 ,56 ,103 ,109 ,225, 104, 164 ,99, 57, 112,
 114, 134, 0 ,250 ,99 ,89, 221, 105 ,189, 160, 147, 349,
 76 ,138 ,184, 235, 138, 114, 212, 39 ,40, 46, 136, 96,
 0, 192 ,228, 235 ,108 ,119 ,165 ,178, 154 ,71, 136, 262,
 110, 74 ,96 ,264 ,187 ,182, 261, 239, 165 ,151, 221, 0,
 121 ,142, 99, 84 ,35 ,29 ,42, 36 ,220 ,70 ,126, 55,
 249 ,104, 178, 60, 96, 175, 153, 146, 47 ,135, 169, 0            
            
                                            };       
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Groetschel 24 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));          
        
    }//GEN-LAST:event_MenuGR24ActionPerformed

    private void MenuGr48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuGr48ActionPerformed

        init_dimension_pool = 10000000;
        NUM_VERTICI = 48;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        String matrix = "0 593 0 409 258 0 566 331 171 0" +
" 633 586 723 874 0 257 602 522 679 390" +
" 0 91 509 325 482 598 228 0 412 627" +
" 506 663 227 169 383 0 378 755 634 791" +
" 397 175 349 167 0 593 416 564 721 271" +
" 445 509 293 429 0 150 598 414 571 488" +
" 112 120 267 233 541 0 659 488 630 787" +
" 205 511 575 304 470 76 607 0 80 566" +
" 382 539 572 196 77 351 317 563 63 629" +
" 0 434 893 699 856 524 231 405 303 138" +
" 595 289 606 373 0 455 417 433 590 313" +
" 304 371 228 394 158 399 224 425 530 0" +
" 134 583 399 566 530 154 105 309 275 575" +
" 34 638 29 298 434 0 649 945 824 981" +
" 446 423 620 357 280 649 504 648 588 416" +
" 584 546 0 259 364 180 337 555 272 175" +
" 338 466 403 264 469 232 549 265 249 656" +
" 0 505 354 110 70 819 618 421 602 730" +
" 660 509 728 478 795 529 494 920 276 0" +
" 710 117 375 354 679 693 626 720 848 533" +
" 715 610 683 986 534 700 1038 481 345 0" +
" 488 784 663 820 289 262 459 196 119 488" +
" 343 502 427 255 423 385 161 495 759 877" +
" 0 353 641 520 677 282 110 324 61 125" +
" 353 208 364 292 261 288 250 315 352 616" +
" 734 154 0 324 275 91 248 638 437 240" +
" 421 549 486 329 552 297 614 348 314 739" +
" 95 187 392 578 435 0 605 287 431 588" +
" 313 445 520 470 598 143 610 215 577 734" +
" 144 595 788 352 527 404 627 484 385 0" +
" 372 229 39 196 686 485 288 469 597 511" +
" 397 578 345 662 396 361 787 143 135 346" +
" 626 483 54 377 0 330 484 361 518 378" +
" 119 260 150 278 323 174 389 276 414 185" +
" 207 468 193 475 577 307 164 276 326 324" +
" 0 581 877 756 913 370 355 552 289 212" +
" 581 436 571 520 348 516 478 84 588 852" +
" 970 93 247 671 720 719 400 0 154 460" +
" 276 433 612 298 63 453 419 460 190 526" +
" 158 475 322 175 690 126 372 577 529 396" +
" 191 471 239 250 622 0 70 523 339 496" +
" 569 191 27 346 312 516 83 589 47 368" +
" 385 68 583 189 435 640 422 287 254 534" +
" 302 249 515 115 0 606 183 216 147 715" +
" 719 522 703 831 549 611 615 579 896 546" +
" 596 1021 377 139 209 860 717 288 416 242" +
" 558 953 473 536 0 585 427 563 720 179" +
" 437 501 196 362 80 532 108 558 498 163" +
" 567 552 395 659 544 391 256 478 154 526" +
" 318 484 452 515 556 0 544 840 719 876" +
" 311 318 515 252 175 508 399 494 483 311" +
" 479 441 154 551 815 933 65 210 634 683" +
" 682 363 77 585 479 916 399 0 496 525" +
" 595 751 147 253 468 85 251 208 351 236" +
" 435 387 162 393 441 427 691 646 280 145" +
" 509 249 558 239 373 538 430 654 128 336" +
" 0 317 289 105 262 631 430 233 414 542" +
" 479 332 545 290 607 341 307 732 88 201" +
" 406 571 428 21 407 68 269 664 184 247" +
" 302 471 627 503 0 648 68 316 362 584" +
" 598 564 625 753 418 653 484 621 891 415" +
" 638 943 395 412 95 782 639 333 285 287" +
" 482 875 515 578 209 425 838 523 347 0" +
" 211 660 476 633 466 74 182 243 171 489" +
" 66 555 150 227 351 108 432 326 572 777" +
" 271 184 391 492 439 166 364 252 145 673" +
" 438 327 327 384 715 0 475 137 295 452" +
" 437 428 391 452 580 271 480 337 448 718" +
" 268 465 770 222 391 254 609 466 255 138" +
" 241 309 702 342 405 287 278 665 376 277" +
" 167 542 0 654 151 319 266 755 767 570" +
" 751 879 561 659 627 627 944 558 644 1069" +
" 425 262 103 908 765 336 428 290 606 1001" +
" 521 584 122 568 964 666 350 169 721 299" +
" 0 710 239 487 546 616 660 626 687 815" +
" 443 715 509 683 953 440 700 1005 457 583" +
" 279 844 701 490 310 458 544 937 577 640" +
" 393 450 900 548 512 179 777 229 353 0" +
" 585 135 385 458 499 535 501 562 690 333" +
" 590 399 558 828 330 575 880 332 481 215" +
" 719 576 365 200 356 419 812 452 515 318" +
" 340 775 438 387 120 652 104 289 121 0" +
" 246 373 183 340 745 472 237 528 656 593" +
" 364 659 332 649 455 349 846 202 279 490" +
" 685 542 157 525 144 383 778 174 289 386" +
" 585 741 618 132 431 426 395 434 630 505" +
" 0 788 208 456 488 724 738 704 765 893" +
" 558 793 624 761 1031 555 778 1083 535 552" +
" 188 922 779 473 425 427 622 1015 655 718" +
" 343 565 978 663 487 138 855 307 284 138" +
" 235 571 0 446 162 111 268 624 559 362" +
" 543 671 458 451 524 419 736 455 436 861" +
" 217 207 279 700 557 128 325 82 398 793" +
" 313 376 175 465 756 563 142 220 513 187" +
" 223 391 289 226 360 0 166 437 247 404" +
" 749 435 150 590 556 597 402 663 295 612" +
" 459 387 827 189 343 554 666 531 221 589" +
" 208 372 759 137 177 450 589 722 675 196" +
" 495 389 459 498 694 569 80 635 290 0" +
" 523 81 188 255 596 636 439 620 648 430" +
" 528 496 496 813 427 513 938 294 284 193" +
" 777 634 205 297 159 475 870 390 453 119" +
" 437 833 535 219 139 590 168 131 310 208" +
" 303 279 92 367 0 235 371 187 344 581" +
" 348 151 364 469 429 240 495 208 525 291" +
" 225 682 32 283 488 521 378 103 384 150" +
" 219 614 94 165 384 421 577 454 92 429" +
" 302 254 432 489 364 165 569 224 154 301" +
" 0 369 205 289 446 537 328 286 355 483" +
" 371 375 437 343 554 269 360 673 116 385" +
" 322 512 369 149 238 230 209 605 237 300" +
" 352 378 568 445 172 281 436 108 332 343" +
" 218 290 421 164 354 201 149 0 121 570" +
" 386 543 518 142 84 297 263 570 35 636" +
" 29 319 432 36 534 236 482 687 373 238" +
" 301 581 349 222 466 162 55 583 562 429" +
" 381 294 625 96 452 631 687 562 336 765" +
" 423 299 500 212 347 0";
        
        int[] lower_diagonal_matrix = GetLowerDiagonalMatrix(matrix, " ");
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Groetschel 48 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));         
        
    }//GEN-LAST:event_MenuGr48ActionPerformed

    private void MenuFri26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuFri26ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 26;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }        
        
        String matrix = "0\n" +
"83\n" +
"0\n" +
"93\n" +
"40\n" +
"0\n" +
"129\n" +
"53\n" +
"42\n" +
"0\n" +
"133\n" +
"62\n" +
"42\n" +
"11\n" +
"0\n" +
"139\n" +
"64\n" +
"49\n" +
"11\n" +
"9\n" +
"0\n" +
"151\n" +
"91\n" +
"59\n" +
"46\n" +
"35\n" +
"39\n" +
"0\n" +
"169\n" +
"116\n" +
"81\n" +
"72\n" +
"61\n" +
"65\n" +
"26\n" +
"0\n" +
"135\n" +
"93\n" +
"54\n" +
"65\n" +
"55\n" +
"63\n" +
"34\n" +
"37\n" +
"0\n" +
"114\n" +
"84\n" +
"44\n" +
"70\n" +
"62\n" +
"71\n" +
"52\n" +
"59\n" +
"22\n" +
"0\n" +
"110\n" +
"95\n" +
"58\n" +
"88\n" +
"82\n" +
"90\n" +
"71\n" +
"75\n" +
"39\n" +
"20\n" +
"0\n" +
"98\n" +
"98\n" +
"64\n" +
"100\n" +
"95\n" +
"103\n" +
"88\n" +
"92\n" +
"56\n" +
"36\n" +
"18\n" +
"0\n" +
"99\n" +
"89\n" +
"54\n" +
"89\n" +
"84\n" +
"92\n" +
"77\n" +
"83\n" +
"47\n" +
"26\n" +
"11\n" +
"11\n" +
"0\n" +
"95\n" +
"68\n" +
"31\n" +
"66\n" +
"62\n" +
"71\n" +
"63\n" +
"76\n" +
"40\n" +
"20\n" +
"27\n" +
"34\n" +
"23\n" +
"0\n" +
"81\n" +
"67\n" +
"36\n" +
"76\n" +
"74\n" +
"82\n" +
"78\n" +
"91\n" +
"55\n" +
"34\n" +
"32\n" +
"31\n" +
"24\n" +
"15\n" +
"0\n" +
"152\n" +
"127\n" +
"86\n" +
"102\n" +
"93\n" +
"100\n" +
"66\n" +
"54\n" +
"37\n" +
"43\n" +
"42\n" +
"56\n" +
"53\n" +
"62\n" +
"73\n" +
"0\n" +
"159\n" +
"156\n" +
"117\n" +
"142\n" +
"133\n" +
"141\n" +
"110\n" +
"98\n" +
"78\n" +
"74\n" +
"61\n" +
"63\n" +
"68\n" +
"87\n" +
"92\n" +
"44\n" +
"0\n" +
"181\n" +
"175\n" +
"135\n" +
"156\n" +
"146\n" +
"153\n" +
"119\n" +
"103\n" +
"91\n" +
"91\n" +
"80\n" +
"85\n" +
"89\n" +
"106\n" +
"112\n" +
"54\n" +
"22\n" +
"0\n" +
"172\n" +
"152\n" +
"112\n" +
"127\n" +
"117\n" +
"124\n" +
"88\n" +
"70\n" +
"62\n" +
"68\n" +
"64\n" +
"75\n" +
"74\n" +
"87\n" +
"96\n" +
"26\n" +
"34\n" +
"33\n" +
"0\n" +
"185\n" +
"165\n" +
"125\n" +
"139\n" +
"128\n" +
"135\n" +
"98\n" +
"78\n" +
"74\n" +
"82\n" +
"77\n" +
"87\n" +
"87\n" +
"100\n" +
"109\n" +
"39\n" +
"38\n" +
"29\n" +
"13\n" +
"0\n" +
"147\n" +
"160\n" +
"124\n" +
"155\n" +
"148\n" +
"156\n" +
"130\n" +
"122\n" +
"96\n" +
"86\n" +
"68\n" +
"62\n" +
"71\n" +
"93\n" +
"93\n" +
"68\n" +
"30\n" +
"46\n" +
"63\n" +
"68\n" +
"0\n" +
"157\n" +
"180\n" +
"147\n" +
"180\n" +
"173\n" +
"181\n" +
"156\n" +
"148\n" +
"122\n" +
"111\n" +
"92\n" +
"83\n" +
"93\n" +
"116\n" +
"113\n" +
"94\n" +
"53\n" +
"64\n" +
"87\n" +
"90\n" +
"26\n" +
"0\n" +
"185\n" +
"223\n" +
"193\n" +
"228\n" +
"222\n" +
"230\n" +
"206\n" +
"198\n" +
"172\n" +
"160\n" +
"140\n" +
"129\n" +
"140\n" +
"163\n" +
"158\n" +
"144\n" +
"102\n" +
"107\n" +
"135\n" +
"136\n" +
"77\n" +
"50\n" +
"0\n" +
"220\n" +
"268\n" +
"241\n" +
"278\n" +
"272\n" +
"280\n" +
"257\n" +
"250\n" +
"223\n" +
"210\n" +
"190\n" +
"178\n" +
"189\n" +
"212\n" +
"205\n" +
"196\n" +
"154\n" +
"157\n" +
"186\n" +
"186\n" +
"128\n" +
"102\n" +
"51\n" +
"0\n" +
"127\n" +
"179\n" +
"157\n" +
"197\n" +
"194\n" +
"202\n" +
"188\n" +
"188\n" +
"155\n" +
"136\n" +
"116\n" +
"100\n" +
"111\n" +
"132\n" +
"122\n" +
"139\n" +
"109\n" +
"125\n" +
"141\n" +
"148\n" +
"80\n" +
"65\n" +
"64\n" +
"93\n" +
"0\n" +
"181\n" +
"197\n" +
"161\n" +
"190\n" +
"182\n" +
"190\n" +
"160\n" +
"148\n" +
"128\n" +
"121\n" +
"103\n" +
"99\n" +
"107\n" +
"130\n" +
"130\n" +
"95\n" +
"51\n" +
"51\n" +
"81\n" +
"79\n" +
"37\n" +
"27\n" +
"58\n" +
"107\n" +
"90\n" +
"0";
        
        int[] lower_diagonal_matrix = GetLowerDiagonalMatrix(matrix, "\n");
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Fricker 26 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));           
        
    }//GEN-LAST:event_MenuFri26ActionPerformed

    private void MenuAtt48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuAtt48ActionPerformed
        
        init_dimension_pool = 10000000;
        NUM_VERTICI = 48;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }                
                
        double[] coord_x = {
6734,
2233,
5530,
401  ,
3082,
7608,
7573,
7265,
6898,
1112,
5468,
5989,
4706,
4612,
6347,
6107,
7611,
7462,
7732,
5900,
4483,
6101,
5199,
1633,
4307,
675  ,
7555,
7541,
3177,
7352,
7545,
3245,
6426,
4608,
23    ,
7248,
7762,
7392,
3484,
6271,
4985,
1916,
7280,
7509,
10    ,
6807,
5185,
3023
                                            };
        
        double[] coord_y = {
1453,
10,
1424,
841,
1644,
4458,
3716,
1268,
1885,
2049,
2606,
2873,
2674,
2035,
2683,
669,
5184,
3590,
4723,
3561,
3369,
1110,
2182,
2809,
2322,
1006,
4819,
3981,
756,
4506,
2801,
3305,
3173,
1198,
2216,
3779,
4595,
2244,
2829,
2135,
140,
1569,
4899,
3239,
2676,
2993,
3258,
1942 
                                           };        
        
        TSPLibInstanceATT(coord_x, coord_y);
        
                LblCurrentInstance.setText("Istanza corrente: TSPlib, Att 48 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));                
        
    }//GEN-LAST:event_MenuAtt48ActionPerformed

    private void MenuBurma14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBurma14ActionPerformed

        init_dimension_pool = 1000000;
       NUM_VERTICI = 14;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI];                             
        
        double[] coord_x = {
16.47  ,
 16.47 ,
 20.09 ,
 22.39 ,
 25.23 ,
 22.00 ,
 20.47 ,
 17.20 ,
 16.30 ,
  14.05,
  16.53,
  21.52,
  19.41,
  20.09
                                            };
        
        double[] coord_y = {
96.10   ,
 94.44,
 92.54,
 93.37,
 97.24,
 96.05,
 97.02,
 96.29,
 97.38,
  98.12,
  97.38,
  95.59,
  97.13,
  94.55    
                                           };
        
        TSPLibInstanceCoordinateGeo(coord_x, coord_y);                
        
                LblCurrentInstance.setText("Istanza corrente: TSPlib, Burma 14 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));        
        
    }//GEN-LAST:event_MenuBurma14ActionPerformed

    private void MenuBayg29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBayg29ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 29;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        String matrix = "97 205 139  86  60 220  65 111 115 227  95  82 225 168 103 266 205 149 120  58 257 152  52 180 136  82  34 145" +
" 129 103  71 105 258 154 112  65 204 150  87 176 137 142 204 148 148  49  41 211 226 116 197  89 153 124  74" +
" 219 125 175 386 269 134 184 313 201 215 267 248 271 274 236 272 160 151 300 350 239 322  78 276 220  60" +
" 167 182 180 162 208  39 102 227  60  86  34  96 129  69  58  60 120 119 192 114 110 192 136 173 173" +
" 51 296 150  42 131 268  88 131 245 201 175 275 218 202 119  50 281 238 131 244  51 166  95  69" +
" 279 114  56 150 278  46 133 266 214 162 302 242 203 146  67 300 205 111 238  98 139  52 120" +
" 178 328 206 147 308 172 203 165 121 251 216 122 231 249 209 111 169  72 338 144 237 331" +
" 169 151 227 133 104 242 182  84 290 230 146 165 121 270  91  48 158 200  39  64 210" +
" 172 309  68 169 286 242 208 315 259 240 160  90 322 260 160 281  57 192 107  90" +
" 140 195  51 117  72 104 153  93  88  25  85 152 200 104 139 154 134 149 135" +
" 320 146  64  68 143 106  88  81 159 219  63 216 187  88 293 191 258 272" +
" 174 311 258 196 347 288 243 192 113 345 222 144 274 124 165  71 153" +
" 144  86  57 189 128  71  71  82 176 150  56 114 168  83 115 160" +
" 61 165  51  32 105 127 201  36 254 196 136 260 212 258 234" +
" 106 110  56  49  91 153  91 197 136  94 225 151 201 205" +
" 215 159  64 126 128 190  98  53  78 218  48 127 214" +
" 61 155 157 235  47 305 243 186 282 261 300 252" +
" 105 100 176  66 253 183 146 231 203 239 204" +
" 113 152 127 150 106  52 235 112 179 221" +
" 79 163 220 119 164 135 152 153 114" +
" 236 201  90 195  90 127  84  91" +
" 273 226 148 296 238 291 269" +
" 112 130 286  74 155 291" +
" 130 178  38  75 180" +
" 281 120 205 270" +
" 213 145  36" +
" 94 217" +
" 162";
        
        int[] upper_row_matrix = GetUpperRowMatrix(matrix, " ");
        
        TSPLibInstanceUpperRow(upper_row_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Bayg 29 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));                 
        
    }//GEN-LAST:event_MenuBayg29ActionPerformed

    private void MenuBays29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuBays29ActionPerformed

        init_dimension_pool = 1000000;
        NUM_VERTICI = 29;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }        
        
        String matrix = "   0 107 241 190 124  80 316  76 152 157 283 133 113 297 228 129 348 276 188 150  65 341 184  67 221 169 108  45 167" +
" 107   0 148 137  88 127 336 183 134  95 254 180 101 234 175 176 265 199 182  67  42 278 271 146 251 105 191 139  79" +
" 241 148   0 374 171 259 509 317 217 232 491 312 280 391 412 349 422 356 355 204 182 435 417 292 424 116 337 273  77" +
" 190 137 374   0 202 234 222 192 248  42 117 287  79 107  38 121 152  86  68  70 137 151 239 135 137 242 165 228 205" +
" 124  88 171 202   0  61 392 202  46 160 319 112 163 322 240 232 314 287 238 155  65 366 300 175 307  57 220 121  97" +
"  80 127 259 234  61   0 386 141  72 167 351  55 157 331 272 226 362 296 232 164  85 375 249 147 301 118 188  60 185" +
" 316 336 509 222 392 386   0 233 438 254 202 439 235 254 210 187 313 266 154 282 321 298 168 249  95 437 190 314 435" +
"  76 183 317 192 202 141 233   0 213 188 272 193 131 302 233  98 344 289 177 216 141 346 108  57 190 245  43  81 243" +
" 152 134 217 248  46  72 438 213   0 206 365  89 209 368 286 278 360 333 284 201 111 412 321 221 353  72 266 132 111" +
" 157  95 232  42 160 167 254 188 206   0 159 220  57 149  80 132 193 127 100  28  95 193 241 131 169 200 161 189 163" +
" 283 254 491 117 319 351 202 272 365 159   0 404 176 106  79 161 165 141  95 187 254 103 279 215 117 359 216 308 322" +
" 133 180 312 287 112  55 439 193  89 220 404   0 210 384 325 279 415 349 285 217 138 428 310 200 354 169 241 112 238" +
" 113 101 280  79 163 157 235 131 209  57 176 210   0 186 117  75 231 165  81  85  92 230 184  74 150 208 104 158 206" +
" 297 234 391 107 322 331 254 302 368 149 106 384 186   0  69 191  59  35 125 167 255  44 309 245 169 327 246 335 288" +
" 228 175 412  38 240 272 210 233 286  80  79 325 117  69   0 122 122  56  56 108 175 113 240 176 125 280 177 266 243" +
" 129 176 349 121 232 226 187  98 278 132 161 279  75 191 122   0 244 178  66 160 161 235 118  62  92 277  55 155 275" +
" 348 265 422 152 314 362 313 344 360 193 165 415 231  59 122 244   0  66 178 198 286  77 362 287 228 358 299 380 319" +
" 276 199 356  86 287 296 266 289 333 127 141 349 165  35  56 178  66   0 112 132 220  79 296 232 181 292 233 314 253" +
" 188 182 355  68 238 232 154 177 284 100  95 285  81 125  56  66 178 112   0 128 167 169 179 120  69 283 121 213 281" +
" 150  67 204  70 155 164 282 216 201  28 187 217  85 167 108 160 198 132 128   0  88 211 269 159 197 172 189 182 135" +
"  65  42 182 137  65  85 321 141 111  95 254 138  92 255 175 161 286 220 167  88   0 299 229 104 236 110 149  97 108" +
" 341 278 435 151 366 375 298 346 412 193 103 428 230  44 113 235  77  79 169 211 299   0 353 289 213 371 290 379 332" +
" 184 271 417 239 300 249 168 108 321 241 279 310 184 309 240 118 362 296 179 269 229 353   0 121 162 345  80 189 342" +
"  67 146 292 135 175 147 249  57 221 131 215 200  74 245 176  62 287 232 120 159 104 289 121   0 154 220  41  93 218" +
" 221 251 424 137 307 301  95 190 353 169 117 354 150 169 125  92 228 181  69 197 236 213 162 154   0 352 147 247 350" +
" 169 105 116 242  57 118 437 245  72 200 359 169 208 327 280 277 358 292 283 172 110 371 345 220 352   0 265 178  39" +
" 108 191 337 165 220 188 190  43 266 161 216 241 104 246 177  55 299 233 121 189 149 290  80  41 147 265   0 124 263" +
"  45 139 273 228 121  60 314  81 132 189 308 112 158 335 266 155 380 314 213 182  97 379 189  93 247 178 124   0 199" +
" 167  79  77 205  97 185 435 243 111 163 322 238 206 288 243 275 319 253 281 135 108 332 342 218 350  39 263 199   0";
        
        cost = GetFullMatrix(matrix, " ");
        
                        LblCurrentInstance.setText("Istanza corrente: TSPlib, Bays 29 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));
        
    }//GEN-LAST:event_MenuBays29ActionPerformed

    private void MenuDantzig42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuDantzig42ActionPerformed

        init_dimension_pool = 5000000;
        NUM_VERTICI = 42;
        cost = new int[NUM_VERTICI][NUM_VERTICI];
        vertici = new Vertex[NUM_VERTICI]; 
        
//inizializza vertici fake, non ci sono le coordinate per questa istanza:
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }
        
        String matrix = "   0   8   0  39  45   0  37  47   9   0  50  49  21  15   0  61  62  21" +
"  20  17   0  58  60  16  17  18   6   0  59  60  15  20  26  17  10   0" +
"  62  66  20  25  31  22  15   5   0  81  81  40  44  50  41  35  24  20" +
"   0 103 107  62  67  72  63  57  46  41  23   0 108 117  66  71  77  68" +
"  61  51  46  26  11   0 145 149 104 108 114 106  99  88  84  63  49  40" +
"   0 181 185 140 144 150 142 135 124 120  99  85  76  35   0 187 191 146" +
" 150 156 142 137 130 125 105  90  81  41  10   0 161 170 120 124 130 115" +
" 110 104 105  90  72  62  34  31  27   0 142 146 101 104 111  97  91  85" +
"  86  75  51  59  29  53  48  21   0 174 178 133 138 143 129 123 117 118" +
" 107  83  84  54  46  35  26  31   0 185 186 142 143 140 130 126 124 128" +
" 118  93 101  72  69  58  58  43  26   0 164 165 120 123 124 106 106 105" +
" 110 104  86  97  71  93  82  62  42  45  22   0 137 139  94  96  94  80" +
"  78  77  84  77  56  64  65  90  87  58  36  68  50  30   0 117 122  77" +
"  80  83  68  62  60  61  50  34  42  49  82  77  60  30  62  70  49  21" +
"   0 114 118  73  78  84  69  63  57  59  48  28  36  43  77  72  45  27" +
"  59  69  55  27   5   0  85  89  44  48  53  41  34  28  29  22  23  35" +
"  69 105 102  74  56  88  99  81  54  32  29   0  77  80  36  40  46  34" +
"  27  19  21  14  29  40  77 114 111  84  64  96 107  87  60  40  37   8" +
"   0  87  89  44  46  46  30  28  29  32  27  36  47  78 116 112  84  66" +
"  98  95  75  47  36  39  12  11   0  91  93  48  50  48  34  32  33  36" +
"  30  34  45  77 115 110  83  63  97  91  72  44  32  36   9  15   3   0" +
" 105 106  62  63  64  47  46  49  54  48  46  59  85 119 115  88  66  98" +
"  79  59  31  36  42  28  33  21  20   0 111 113  69  71  66  51  53  56" +
"  61  57  59  71  96 130 126  98  75  98  85  62  38  47  53  39  42  29" +
"  30  12   0  91  92  50  51  46  30  34  38  43  49  60  71 103 141 136" +
" 109  90 115  99  81  53  61  62  36  34  24  28  20  20   0  83  85  42" +
"  43  38  22  26  32  36  51  63  75 106 142 140 112  93 126 108  88  60" +
"  64  66  39  36  27  31  28  28   8   0  89  91  55  55  50  34  39  44" +
"  49  63  76  87 120 155 150 123 100 123 109  86  62  71  78  52  49  39" +
"  44  35  24  15  12   0  95  97  64  63  56  42  49  56  60  75  86  97" +
" 126 160 155 128 104 128 113  90  67  76  82  62  59  49  53  40  29  25" +
"  23  11   0  74  81  44  43  35  23  30  39  44  62  78  89 121 159 155" +
" 127 108 136 124 101  75  79  81  54  50  42  46  43  39  23  14  14  21" +
"   0  67  69  42  41  31  25  32  41  46  64  83  90 130 164 160 133 114" +
" 146 134 111  85  84  86  59  52  47  51  53  49  32  24  24  30   9   0" +
"  74  76  61  60  42  44  51  60  66  83 102 110 147 185 179 155 133 159" +
" 146 122  98 105 107  79  71  66  70  70  60  48  40  36  33  25  18   0" +
"  57  59  46  41  25  30  36  47  52  71  93  98 136 172 172 148 126 158" +
" 147 124 121  97  99  71  65  59  63  67  62  46  38  37  43  23  13  17" +
"   0  45  46  41  34  20  34  38  48  53  73  96  99 137 176 178 151 131" +
" 163 159 135 108 102 103  73  67  64  69  75  72  54  46  49  54  34  24" +
"  29  12   0  35  37  35  26  18  34  36  46  51  70  93  97 134 171 176" +
" 151 129 161 163 139 118 102 101  71  65  65  70  84  78  58  50  56  62" +
"  41  32  38  21   9   0  29  33  30  21  18  35  33  40  45  65  87  91" +
" 117 166 171 144 125 157 156 139 113  95  97  67  60  62  67  79  82  62" +
"  53  59  66  45  38  45  27  15   6   0   3  11  41  37  47  57  55  58" +
"  63  83 105 109 147 186 188 164 144 176 182 161 134 119 116  86  78  84" +
"  88 101 108  88  80  86  92  71  64  71  54  41  32  25   0   5  12  55" +
"  41  53  64  61  61  66  84 111 113 150 186 192 166 147 180 188 167 140" +
" 124 119  90  87  90  94 107 114  77  86  92  98  80  74  77  60  48  38" +
"  32   6   0 ";
        
        int[] lower_diagonal_matrix = GetLowerDiagonalMatrix(matrix, " ");
        
        TSPLibInstanceLowerDiagonal(lower_diagonal_matrix);
        

                LblCurrentInstance.setText("Istanza corrente: TSPlib, Dantzig 42 città");
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));              
        
    }//GEN-LAST:event_MenuDantzig42ActionPerformed

    private void MenuIstanzaUlisse16ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaUlisse16ActionPerformed
        
        String text = "NAME: ulysses16.tsp\n" +
"TYPE: TSP\n" +
"COMMENT: Odyssey of Ulysses (Groetschel/Padberg)\n" +
"DIMENSION: 16\n" +
"EDGE_WEIGHT_TYPE: GEO\n" +
"DISPLAY_DATA_TYPE: COORD_DISPLAY\n" +
"NODE_COORD_SECTION\n" +
" 1 38.24 20.42\n" +
" 2 39.57 26.15\n" +
" 3 40.56 25.32\n" +
" 4 36.26 23.12\n" +
" 5 33.48 10.54\n" +
" 6 37.56 12.19\n" +
" 7 38.42 13.11\n" +
" 8 37.52 20.44\n" +
" 9 41.23 9.10\n" +
" 10 41.17 13.05\n" +
" 11 36.08 -5.21\n" +
" 12 38.47 15.13\n" +
" 13 38.15 15.35\n" +
" 14 37.51 15.17\n" +
" 15 35.49 14.32\n" +
" 16 39.36 19.56\n" +
" EOF"
                + "\r\n\r\n--------------\r\n\r\n"
                + "NAME : ulysses16.opt.tour\n" +
"COMMENT : Optimal solution for ulysses16 (6859)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 16\n" +
"TOUR_SECTION\n" +
"1 14 13 12 7 6 15 5 11 9 10 16 3 2 4 8\n" +
"-1\n" +
"EOF"
                + "\r\n\r\n-----------------\r\n\r\n";
        
                String note = "Note:\r\n\n" +
"                Geographical distance \r\n\n" +
"If the traveling salesman problem is a geographical problem, then the nodes correspond to\n" +
"points on the earth and the distance between two points is their distance on the idealized\n" +
"sphere with radius 6378.388 kilometers. The node coordinates give the geographical lat-\n" +
"itude and longitude of the corresponding point on the earth. Latitude and longitude are\n" +
"given in the form DDD.MM where DDD are the degrees and MM the minutes. A positive lati-\n" +
"tude is assumed to be \\\\North\\\", negative latitude means \\\\South\\\". Positive longitude means\n" +
"\\\\East\\\", negative latitude is assumed to be \\\\West\\\". For example, the input coordinates for\n" +
"Augsburg are 48.23 and 10.53, meaning 48 degrees 23 minutes North and 10 degrees 53 minutes East.\n" +
"\r\n\r\nLet x[i] and y[i] be coordinates for city i in the above format. \r\nFirst the input is converted\n" +
"to geographical latitude and longitude given in radians.\n" +
"\r\n\r\nPI = 3.141592;\n" +
"deg = nint( x[i] );\n" +
"min = x[i] - deg;\n" +
"latitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"deg = nint( y[i] );\n" +
"min = y[i] - deg;\n" +
"longitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"\r\n\r\nThe distance between two different nodes i and j in kilometers is then computed as follows:\n" +
"RRR = 6378.388;\n" +
"q1 = cos( longitude[i] - longitude[j] );\n" +
"q2 = cos( latitude[i] - latitude[j] );\n" +
"q3 = cos( latitude[i] + latitude[j] );\n" +
"dij = (int) ( RRR * acos( 0.5*((1.0+q1)*q2 - (1.0-q1)*q3) ) + 1.0);";
        
        VediIstanza view = new VediIstanza("Ulisse 16");
        view.setText(text + note);
        
        view.setVisible(true);
        
    }//GEN-LAST:event_MenuIstanzaUlisse16ActionPerformed

    private void MenuIstanzaUlisse22ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaUlisse22ActionPerformed
        
        String text = "NAME: ulysses22.tsp\n" +
"TYPE: TSP\n" +
"COMMENT: Odyssey of Ulysses (Groetschel/Padberg)\n" +
"DIMENSION: 22\n" +
"EDGE_WEIGHT_TYPE: GEO\n" +
"DISPLAY_DATA_TYPE: COORD_DISPLAY\n" +
"NODE_COORD_SECTION\n" +
" 1 38.24 20.42\n" +
" 2 39.57 26.15\n" +
" 3 40.56 25.32\n" +
" 4 36.26 23.12\n" +
" 5 33.48 10.54\n" +
" 6 37.56 12.19\n" +
" 7 38.42 13.11\n" +
" 8 37.52 20.44\n" +
" 9 41.23 9.10\n" +
" 10 41.17 13.05\n" +
" 11 36.08 -5.21\n" +
" 12 38.47 15.13\n" +
" 13 38.15 15.35\n" +
" 14 37.51 15.17\n" +
" 15 35.49 14.32\n" +
" 16 39.36 19.56\n" +
" 17 38.09 24.36\n" +
" 18 36.09 23.00\n" +
" 19 40.44 13.57\n" +
" 20 40.33 14.15\n" +
" 21 40.37 14.23\n" +
" 22 37.57 22.56\n" +
"EOF"
                + "\r\n\r\n------\r\n\r\n"
                + "NAME : ulysses22.opt.tour\n" +
"TYPE : TOUR\n" +
"COMMENT : Optimal solution of ulysses22 (7013)\n" +
"DIMENSION : 22\n" +
"TOUR_SECTION\n" +
"1\n" +
"14\n" +
"13\n" +
"12\n" +
"7\n" +
"6\n" +
"15\n" +
"5\n" +
"11\n" +
"9\n" +
"10\n" +
"19\n" +
"20\n" +
"21\n" +
"16\n" +
"3\n" +
"2\n" +
"17\n" +
"22\n" +
"4\n" +
"18\n" +
"8\n" +
"-1"
                + "\r\n\r\n-------\r\n\r\n";
        
        
                String note = "Note:\r\n\n" +
"                Geographical distance \r\n\n" +
"If the traveling salesman problem is a geographical problem, then the nodes correspond to\n" +
"points on the earth and the distance between two points is their distance on the idealized\n" +
"sphere with radius 6378.388 kilometers. The node coordinates give the geographical lat-\n" +
"itude and longitude of the corresponding point on the earth. Latitude and longitude are\n" +
"given in the form DDD.MM where DDD are the degrees and MM the minutes. A positive lati-\n" +
"tude is assumed to be \\\\North\\\", negative latitude means \\\\South\\\". Positive longitude means\n" +
"\\\\East\\\", negative latitude is assumed to be \\\\West\\\". For example, the input coordinates for\n" +
"Augsburg are 48.23 and 10.53, meaning 48 degrees 23 minutes North and 10 degrees 53 minutes East.\n" +
"\r\n\r\nLet x[i] and y[i] be coordinates for city i in the above format. \r\nFirst the input is converted\n" +
"to geographical latitude and longitude given in radians.\n" +
"\r\n\r\nPI = 3.141592;\n" +
"deg = nint( x[i] );\n" +
"min = x[i] - deg;\n" +
"latitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"deg = nint( y[i] );\n" +
"min = y[i] - deg;\n" +
"longitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"\r\n\r\nThe distance between two different nodes i and j in kilometers is then computed as follows:\n" +
"RRR = 6378.388;\n" +
"q1 = cos( longitude[i] - longitude[j] );\n" +
"q2 = cos( latitude[i] - latitude[j] );\n" +
"q3 = cos( latitude[i] + latitude[j] );\n" +
"dij = (int) ( RRR * acos( 0.5*((1.0+q1)*q2 - (1.0-q1)*q3) ) + 1.0);";
        
                VediIstanza view = new VediIstanza("Ulisse 22");
        view.setText(text + note);
        
        view.setVisible(true);
    }//GEN-LAST:event_MenuIstanzaUlisse22ActionPerformed

    private void MenuIstanzaGr17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaGr17ActionPerformed
        
        String text = "NAME: gr17\n" +
"TYPE: TSP\n" +
"COMMENT: 17-city problem (Groetschel)\n" +
"DIMENSION: 17\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: LOWER_DIAG_ROW \n" +
"EDGE_WEIGHT_SECTION\n" +
" 0 633 0 257 390 0 91 661 228 0 412 227\n" +
" 169 383 0 150 488 112 120 267 0 80 572 196\n" +
" 77 351 63 0 134 530 154 105 309 34 29 0\n" +
" 259 555 372 175 338 264 232 249 0 505 289 262\n" +
" 476 196 360 444 402 495 0 353 282 110 324 61\n" +
" 208 292 250 352 154 0 324 638 437 240 421 329\n" +
" 297 314 95 578 435 0 70 567 191 27 346 83\n" +
" 47 68 189 439 287 254 0 211 466 74 182 243\n" +
" 105 150 108 326 336 184 391 145 0 268 420 53\n" +
" 239 199 123 207 165 383 240 140 448 202 57 0\n" +
" 246 745 472 237 528 364 332 349 202 685 542 157\n" +
" 289 426 483 0 121 518 142 84 297 35 29 36\n" +
" 236 390 238 301 55 96 153 336 0 ";
        
        String sol = "\r\n\r\n---------\r\n\r\nBest known solution = 2085";
        
        VediIstanza view = new VediIstanza("Groetschel 17");
        view.setText(text + sol);
        
        view.setVisible(true);
        
    }//GEN-LAST:event_MenuIstanzaGr17ActionPerformed

    private void MenuIstanzaGr21ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaGr21ActionPerformed
        
        String text = "NAME: gr21\n" +
"TYPE: TSP\n" +
"COMMENT: 21-city problem (Groetschel)\n" +
"DIMENSION: 21\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: LOWER_DIAG_ROW \n" +
"EDGE_WEIGHT_SECTION\n" +
"     0   510     0   635   355     0    91   415   605     0            \n" +
"   385   585   390   350     0   155   475   495   120   240            \n" +
"     0   110   480   570    78   320    96     0   130   500            \n" +
"   540    97   285    36    29     0   490   605   295   460            \n" +
"   120   350   425   390     0   370   320   700   280   590            \n" +
"   365   350   370   625     0   155   380   640    63   430            \n" +
"   200   160   175   535   240     0    68   440   575    27            \n" +
"   320    91    48    67   430   300    90     0   610   360            \n" +
"   705   520   835   605   590   610   865   250   480   545            \n" +
"     0   655   235   585   555   750   615   625   645   775            \n" +
"   285   515   585   190     0   480    81   435   380   575            \n" +
"   440   455   465   600   245   345   415   295   170     0            \n" +
"   265   480   420   235   125   125   200   165   230   475            \n" +
"   310   205   715   650   475     0   255   440   755   235            \n" +
"   650   370   320   350   680   150   175   265   400   435            \n" +
"   385   485     0   450   270   625   345   660   430   420            \n" +
"   440   690    77   310   380   180   215   190   545   225            \n" +
"     0   170   445   750   160   495   265   220   240   600            \n" +
"   235   125   170   485   525   405   375    87   315     0            \n" +
"   240   290   590   140   480   255   205   220   515   150            \n" +
"   100   170   390   425   255   395   205   220   155     0            \n" +
"   380   140   495   280   480   340   350   370   505   185            \n" +
"   240   310   345   280   105   380   280   165   305   150            \n" +
"     0                                                      \n" +
"EOF            ";
        
        String sol = "\r\n\r\n---------\r\n\r\nBest known solution = 2707";
        
        VediIstanza view = new VediIstanza("Groetschel 21");
        view.setText(text + sol);
        
        view.setVisible(true);
        
    }//GEN-LAST:event_MenuIstanzaGr21ActionPerformed

    private void MenuIstanzaGr24ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaGr24ActionPerformed
        
        String text = "NAME: gr24\n" +
"TYPE: TSP\n" +
"COMMENT: 24-city problem (Groetschel)\n" +
"DIMENSION: 24\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: LOWER_DIAG_ROW \n" +
"EDGE_WEIGHT_SECTION\n" +
" 0 257 0 187 196 0 91 228 158 0 150 112\n" +
" 96 120 0 80 196 88 77 63 0 130 167 59\n" +
" 101 56 25 0 134 154 63 105 34 29 22 0\n" +
" 243 209 286 159 190 216 229 225 0 185 86 124\n" +
" 156 40 124 95 82 207 0 214 223 49 185 123\n" +
" 115 86 90 313 151 0 70 191 121 27 83 47\n" +
" 64 68 173 119 148 0 272 180 315 188 193 245\n" +
" 258 228 29 159 342 209 0 219 83 172 149 79\n" +
" 139 134 112 126 62 199 153 97 0 293 50 232\n" +
" 264 148 232 203 190 248 122 259 227 219 134 0\n" +
" 54 219 92 82 119 31 43 58 238 147 84 53\n" +
" 267 170 255 0 211 74 81 182 105 150 121 108\n" +
" 310 37 160 145 196 99 125 173 0 290 139 98\n" +
" 261 144 176 164 136 389 116 147 224 275 178 154\n" +
" 190 79 0 268 53 138 239 123 207 178 165 367\n" +
" 86 187 202 227 130 68 230 57 86 0 261 43\n" +
" 200 232 98 200 171 131 166 90 227 195 137 69\n" +
" 82 223 90 176 90 0 175 128 76 146 32 76\n" +
" 47 30 222 56 103 109 225 104 164 99 57 112\n" +
" 114 134 0 250 99 89 221 105 189 160 147 349\n" +
" 76 138 184 235 138 114 212 39 40 46 136 96\n" +
" 0 192 228 235 108 119 165 178 154 71 136 262\n" +
" 110 74 96 264 187 182 261 239 165 151 221 0\n" +
" 121 142 99 84 35 29 42 36 220 70 126 55\n" +
" 249 104 178 60 96 175 153 146 47 135 169 0\n" +
"EOF";
        
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                 "NAME : gr24.opt.tour\n" +
"COMMENT : Optimal solution for gr24 (1272)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 24\n" +
"TOUR_SECTION\n" +
"16 11 3 7 6 24 8 21 5 10 17 22 18 19 15 2 20 14 13 9 23 4 12 1\n" +
"-1\n" +
"EOF";
        
        VediIstanza view = new VediIstanza("Groetschel 24");
        view.setText(text + sol);
        
        view.setVisible(true);
        
    }//GEN-LAST:event_MenuIstanzaGr24ActionPerformed

    private void MenuIstanzaGr48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaGr48ActionPerformed
        
        String text = "NAME: gr48\n" +
"TYPE: TSP\n" +
"COMMENT: 48-city problem (Groetschel)\n" +
"DIMENSION: 48\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: LOWER_DIAG_ROW \n" +
"EDGE_WEIGHT_SECTION\n" +
" 0 593 0 409 258 0 566 331 171 0\n" +
" 633 586 723 874 0 257 602 522 679 390\n" +
" 0 91 509 325 482 598 228 0 412 627\n" +
" 506 663 227 169 383 0 378 755 634 791\n" +
" 397 175 349 167 0 593 416 564 721 271\n" +
" 445 509 293 429 0 150 598 414 571 488\n" +
" 112 120 267 233 541 0 659 488 630 787\n" +
" 205 511 575 304 470 76 607 0 80 566\n" +
" 382 539 572 196 77 351 317 563 63 629\n" +
" 0 434 893 699 856 524 231 405 303 138\n" +
" 595 289 606 373 0 455 417 433 590 313\n" +
" 304 371 228 394 158 399 224 425 530 0\n" +
" 134 583 399 566 530 154 105 309 275 575\n" +
" 34 638 29 298 434 0 649 945 824 981\n" +
" 446 423 620 357 280 649 504 648 588 416\n" +
" 584 546 0 259 364 180 337 555 272 175\n" +
" 338 466 403 264 469 232 549 265 249 656\n" +
" 0 505 354 110 70 819 618 421 602 730\n" +
" 660 509 728 478 795 529 494 920 276 0\n" +
" 710 117 375 354 679 693 626 720 848 533\n" +
" 715 610 683 986 534 700 1038 481 345 0\n" +
" 488 784 663 820 289 262 459 196 119 488\n" +
" 343 502 427 255 423 385 161 495 759 877\n" +
" 0 353 641 520 677 282 110 324 61 125\n" +
" 353 208 364 292 261 288 250 315 352 616\n" +
" 734 154 0 324 275 91 248 638 437 240\n" +
" 421 549 486 329 552 297 614 348 314 739\n" +
" 95 187 392 578 435 0 605 287 431 588\n" +
" 313 445 520 470 598 143 610 215 577 734\n" +
" 144 595 788 352 527 404 627 484 385 0\n" +
" 372 229 39 196 686 485 288 469 597 511\n" +
" 397 578 345 662 396 361 787 143 135 346\n" +
" 626 483 54 377 0 330 484 361 518 378\n" +
" 119 260 150 278 323 174 389 276 414 185\n" +
" 207 468 193 475 577 307 164 276 326 324\n" +
" 0 581 877 756 913 370 355 552 289 212\n" +
" 581 436 571 520 348 516 478 84 588 852\n" +
" 970 93 247 671 720 719 400 0 154 460\n" +
" 276 433 612 298 63 453 419 460 190 526\n" +
" 158 475 322 175 690 126 372 577 529 396\n" +
" 191 471 239 250 622 0 70 523 339 496\n" +
" 569 191 27 346 312 516 83 589 47 368\n" +
" 385 68 583 189 435 640 422 287 254 534\n" +
" 302 249 515 115 0 606 183 216 147 715\n" +
" 719 522 703 831 549 611 615 579 896 546\n" +
" 596 1021 377 139 209 860 717 288 416 242\n" +
" 558 953 473 536 0 585 427 563 720 179\n" +
" 437 501 196 362 80 532 108 558 498 163\n" +
" 567 552 395 659 544 391 256 478 154 526\n" +
" 318 484 452 515 556 0 544 840 719 876\n" +
" 311 318 515 252 175 508 399 494 483 311\n" +
" 479 441 154 551 815 933 65 210 634 683\n" +
" 682 363 77 585 479 916 399 0 496 525\n" +
" 595 751 147 253 468 85 251 208 351 236\n" +
" 435 387 162 393 441 427 691 646 280 145\n" +
" 509 249 558 239 373 538 430 654 128 336\n" +
" 0 317 289 105 262 631 430 233 414 542\n" +
" 479 332 545 290 607 341 307 732 88 201\n" +
" 406 571 428 21 407 68 269 664 184 247\n" +
" 302 471 627 503 0 648 68 316 362 584\n" +
" 598 564 625 753 418 653 484 621 891 415\n" +
" 638 943 395 412 95 782 639 333 285 287\n" +
" 482 875 515 578 209 425 838 523 347 0\n" +
" 211 660 476 633 466 74 182 243 171 489\n" +
" 66 555 150 227 351 108 432 326 572 777\n" +
" 271 184 391 492 439 166 364 252 145 673\n" +
" 438 327 327 384 715 0 475 137 295 452\n" +
" 437 428 391 452 580 271 480 337 448 718\n" +
" 268 465 770 222 391 254 609 466 255 138\n" +
" 241 309 702 342 405 287 278 665 376 277\n" +
" 167 542 0 654 151 319 266 755 767 570\n" +
" 751 879 561 659 627 627 944 558 644 1069\n" +
" 425 262 103 908 765 336 428 290 606 1001\n" +
" 521 584 122 568 964 666 350 169 721 299\n" +
" 0 710 239 487 546 616 660 626 687 815\n" +
" 443 715 509 683 953 440 700 1005 457 583\n" +
" 279 844 701 490 310 458 544 937 577 640\n" +
" 393 450 900 548 512 179 777 229 353 0\n" +
" 585 135 385 458 499 535 501 562 690 333\n" +
" 590 399 558 828 330 575 880 332 481 215\n" +
" 719 576 365 200 356 419 812 452 515 318\n" +
" 340 775 438 387 120 652 104 289 121 0\n" +
" 246 373 183 340 745 472 237 528 656 593\n" +
" 364 659 332 649 455 349 846 202 279 490\n" +
" 685 542 157 525 144 383 778 174 289 386\n" +
" 585 741 618 132 431 426 395 434 630 505\n" +
" 0 788 208 456 488 724 738 704 765 893\n" +
" 558 793 624 761 1031 555 778 1083 535 552\n" +
" 188 922 779 473 425 427 622 1015 655 718\n" +
" 343 565 978 663 487 138 855 307 284 138\n" +
" 235 571 0 446 162 111 268 624 559 362\n" +
" 543 671 458 451 524 419 736 455 436 861\n" +
" 217 207 279 700 557 128 325 82 398 793\n" +
" 313 376 175 465 756 563 142 220 513 187\n" +
" 223 391 289 226 360 0 166 437 247 404\n" +
" 749 435 150 590 556 597 402 663 295 612\n" +
" 459 387 827 189 343 554 666 531 221 589\n" +
" 208 372 759 137 177 450 589 722 675 196\n" +
" 495 389 459 498 694 569 80 635 290 0\n" +
" 523 81 188 255 596 636 439 620 648 430\n" +
" 528 496 496 813 427 513 938 294 284 193\n" +
" 777 634 205 297 159 475 870 390 453 119\n" +
" 437 833 535 219 139 590 168 131 310 208\n" +
" 303 279 92 367 0 235 371 187 344 581\n" +
" 348 151 364 469 429 240 495 208 525 291\n" +
" 225 682 32 283 488 521 378 103 384 150\n" +
" 219 614 94 165 384 421 577 454 92 429\n" +
" 302 254 432 489 364 165 569 224 154 301\n" +
" 0 369 205 289 446 537 328 286 355 483\n" +
" 371 375 437 343 554 269 360 673 116 385\n" +
" 322 512 369 149 238 230 209 605 237 300\n" +
" 352 378 568 445 172 281 436 108 332 343\n" +
" 218 290 421 164 354 201 149 0 121 570\n" +
" 386 543 518 142 84 297 263 570 35 636\n" +
" 29 319 432 36 534 236 482 687 373 238\n" +
" 301 581 349 222 466 162 55 583 562 429\n" +
" 381 294 625 96 452 631 687 562 336 765\n" +
" 423 299 500 212 347 0\n" +
"EOF";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "NAME : gr48.opt.tour\n" +
"TYPE : TOUR\n" +
"COMMENT : Optimal solution for gr48 (5046)\n" +
"DIMENSION : 48\n" +
"TOUR_SECTION\n" +
"29 7 28 44 41 46 18 34 23 25 3 19 4 30 38\n" +
"20 35 42 39 40 2 45 43 47 37 24 15 10 12 31\n" +
"5 33 8 22 21 17 27 32 9 14 6 26 36 11 16 48 13\n" +
"1\n" +
"-1\n" +
"EOF";
        
        VediIstanza view = new VediIstanza("Groetschel 48");
        view.setText(text + sol);
        
        view.setVisible(true);        
        
    }//GEN-LAST:event_MenuIstanzaGr48ActionPerformed

    private void MenuIstanzaFr26ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaFr26ActionPerformed
        
        String text = "NAME: fri26\n" +
"TYPE: TSP\n" +
"COMMENT: 26 Staedte (Fricker)\n" +
"DIMENSION: 26\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: LOWER_DIAG_ROW \n" +
"EDGE_WEIGHT_SECTION\n" +
"0\n" +
"83\n" +
"0\n" +
"93\n" +
"40\n" +
"0\n" +
"129\n" +
"53\n" +
"42\n" +
"0\n" +
"133\n" +
"62\n" +
"42\n" +
"11\n" +
"0\n" +
"139\n" +
"64\n" +
"49\n" +
"11\n" +
"9\n" +
"0\n" +
"151\n" +
"91\n" +
"59\n" +
"46\n" +
"35\n" +
"39\n" +
"0\n" +
"169\n" +
"116\n" +
"81\n" +
"72\n" +
"61\n" +
"65\n" +
"26\n" +
"0\n" +
"135\n" +
"93\n" +
"54\n" +
"65\n" +
"55\n" +
"63\n" +
"34\n" +
"37\n" +
"0\n" +
"114\n" +
"84\n" +
"44\n" +
"70\n" +
"62\n" +
"71\n" +
"52\n" +
"59\n" +
"22\n" +
"0\n" +
"110\n" +
"95\n" +
"58\n" +
"88\n" +
"82\n" +
"90\n" +
"71\n" +
"75\n" +
"39\n" +
"20\n" +
"0\n" +
"98\n" +
"98\n" +
"64\n" +
"100\n" +
"95\n" +
"103\n" +
"88\n" +
"92\n" +
"56\n" +
"36\n" +
"18\n" +
"0\n" +
"99\n" +
"89\n" +
"54\n" +
"89\n" +
"84\n" +
"92\n" +
"77\n" +
"83\n" +
"47\n" +
"26\n" +
"11\n" +
"11\n" +
"0\n" +
"95\n" +
"68\n" +
"31\n" +
"66\n" +
"62\n" +
"71\n" +
"63\n" +
"76\n" +
"40\n" +
"20\n" +
"27\n" +
"34\n" +
"23\n" +
"0\n" +
"81\n" +
"67\n" +
"36\n" +
"76\n" +
"74\n" +
"82\n" +
"78\n" +
"91\n" +
"55\n" +
"34\n" +
"32\n" +
"31\n" +
"24\n" +
"15\n" +
"0\n" +
"152\n" +
"127\n" +
"86\n" +
"102\n" +
"93\n" +
"100\n" +
"66\n" +
"54\n" +
"37\n" +
"43\n" +
"42\n" +
"56\n" +
"53\n" +
"62\n" +
"73\n" +
"0\n" +
"159\n" +
"156\n" +
"117\n" +
"142\n" +
"133\n" +
"141\n" +
"110\n" +
"98\n" +
"78\n" +
"74\n" +
"61\n" +
"63\n" +
"68\n" +
"87\n" +
"92\n" +
"44\n" +
"0\n" +
"181\n" +
"175\n" +
"135\n" +
"156\n" +
"146\n" +
"153\n" +
"119\n" +
"103\n" +
"91\n" +
"91\n" +
"80\n" +
"85\n" +
"89\n" +
"106\n" +
"112\n" +
"54\n" +
"22\n" +
"0\n" +
"172\n" +
"152\n" +
"112\n" +
"127\n" +
"117\n" +
"124\n" +
"88\n" +
"70\n" +
"62\n" +
"68\n" +
"64\n" +
"75\n" +
"74\n" +
"87\n" +
"96\n" +
"26\n" +
"34\n" +
"33\n" +
"0\n" +
"185\n" +
"165\n" +
"125\n" +
"139\n" +
"128\n" +
"135\n" +
"98\n" +
"78\n" +
"74\n" +
"82\n" +
"77\n" +
"87\n" +
"87\n" +
"100\n" +
"109\n" +
"39\n" +
"38\n" +
"29\n" +
"13\n" +
"0\n" +
"147\n" +
"160\n" +
"124\n" +
"155\n" +
"148\n" +
"156\n" +
"130\n" +
"122\n" +
"96\n" +
"86\n" +
"68\n" +
"62\n" +
"71\n" +
"93\n" +
"93\n" +
"68\n" +
"30\n" +
"46\n" +
"63\n" +
"68\n" +
"0\n" +
"157\n" +
"180\n" +
"147\n" +
"180\n" +
"173\n" +
"181\n" +
"156\n" +
"148\n" +
"122\n" +
"111\n" +
"92\n" +
"83\n" +
"93\n" +
"116\n" +
"113\n" +
"94\n" +
"53\n" +
"64\n" +
"87\n" +
"90\n" +
"26\n" +
"0\n" +
"185\n" +
"223\n" +
"193\n" +
"228\n" +
"222\n" +
"230\n" +
"206\n" +
"198\n" +
"172\n" +
"160\n" +
"140\n" +
"129\n" +
"140\n" +
"163\n" +
"158\n" +
"144\n" +
"102\n" +
"107\n" +
"135\n" +
"136\n" +
"77\n" +
"50\n" +
"0\n" +
"220\n" +
"268\n" +
"241\n" +
"278\n" +
"272\n" +
"280\n" +
"257\n" +
"250\n" +
"223\n" +
"210\n" +
"190\n" +
"178\n" +
"189\n" +
"212\n" +
"205\n" +
"196\n" +
"154\n" +
"157\n" +
"186\n" +
"186\n" +
"128\n" +
"102\n" +
"51\n" +
"0\n" +
"127\n" +
"179\n" +
"157\n" +
"197\n" +
"194\n" +
"202\n" +
"188\n" +
"188\n" +
"155\n" +
"136\n" +
"116\n" +
"100\n" +
"111\n" +
"132\n" +
"122\n" +
"139\n" +
"109\n" +
"125\n" +
"141\n" +
"148\n" +
"80\n" +
"65\n" +
"64\n" +
"93\n" +
"0\n" +
"181\n" +
"197\n" +
"161\n" +
"190\n" +
"182\n" +
"190\n" +
"160\n" +
"148\n" +
"128\n" +
"121\n" +
"103\n" +
"99\n" +
"107\n" +
"130\n" +
"130\n" +
"95\n" +
"51\n" +
"51\n" +
"81\n" +
"79\n" +
"37\n" +
"27\n" +
"58\n" +
"107\n" +
"90\n" +
"0\n" +
"EOF\n";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "NAME : fri26.opt.tour\n" +
"COMMENT : optimal tour for fri26 (937)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 26\n" +
"TOUR_SECTION\n" +
"1\n" +
"25\n" +
"24\n" +
"23\n" +
"26\n" +
"22\n" +
"21\n" +
"17\n" +
"18\n" +
"20\n" +
"19\n" +
"16\n" +
"11\n" +
"12\n" +
"13\n" +
"15\n" +
"14\n" +
"10\n" +
"9\n" +
"8\n" +
"7\n" +
"5\n" +
"6\n" +
"4\n" +
"3\n" +
"2\n" +
"-1\n" +
"EOF";
        
        VediIstanza view = new VediIstanza("Fricker 26");
        view.setText(text + sol);
        
        view.setVisible(true);              
        
    }//GEN-LAST:event_MenuIstanzaFr26ActionPerformed

    private void MenuIstanzaAtt48ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaAtt48ActionPerformed

        String text = "NAME : att48\n" +
"COMMENT : 48 capitals of the US (Padberg/Rinaldi)\n" +
"TYPE : TSP\n" +
"DIMENSION : 48\n" +
"EDGE_WEIGHT_TYPE : ATT\n" +
"NODE_COORD_SECTION\n" +
"1 6734 1453\n" +
"2 2233 10\n" +
"3 5530 1424\n" +
"4 401 841\n" +
"5 3082 1644\n" +
"6 7608 4458\n" +
"7 7573 3716\n" +
"8 7265 1268\n" +
"9 6898 1885\n" +
"10 1112 2049\n" +
"11 5468 2606\n" +
"12 5989 2873\n" +
"13 4706 2674\n" +
"14 4612 2035\n" +
"15 6347 2683\n" +
"16 6107 669\n" +
"17 7611 5184\n" +
"18 7462 3590\n" +
"19 7732 4723\n" +
"20 5900 3561\n" +
"21 4483 3369\n" +
"22 6101 1110\n" +
"23 5199 2182\n" +
"24 1633 2809\n" +
"25 4307 2322\n" +
"26 675 1006\n" +
"27 7555 4819\n" +
"28 7541 3981\n" +
"29 3177 756\n" +
"30 7352 4506\n" +
"31 7545 2801\n" +
"32 3245 3305\n" +
"33 6426 3173\n" +
"34 4608 1198\n" +
"35 23 2216\n" +
"36 7248 3779\n" +
"37 7762 4595\n" +
"38 7392 2244\n" +
"39 3484 2829\n" +
"40 6271 2135\n" +
"41 4985 140\n" +
"42 1916 1569\n" +
"43 7280 4899\n" +
"44 7509 3239\n" +
"45 10 2676\n" +
"46 6807 2993\n" +
"47 5185 3258\n" +
"48 3023 1942\n" +
"EOF";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "NAME : att48.opt.tour\n" +
"COMMENT : Optimum solution  for att48   (10628)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 48\n" +
"TOUR_SECTION\n" +
"1\n" +
"8\n" +
"38\n" +
"31\n" +
"44\n" +
"18\n" +
"7\n" +
"28\n" +
"6\n" +
"37\n" +
"19\n" +
"27\n" +
"17\n" +
"43\n" +
"30\n" +
"36\n" +
"46\n" +
"33\n" +
"20\n" +
"47\n" +
"21\n" +
"32\n" +
"39\n" +
"48\n" +
"5\n" +
"42\n" +
"24\n" +
"10\n" +
"45\n" +
"35\n" +
"4\n" +
"26\n" +
"2\n" +
"29\n" +
"34\n" +
"41\n" +
"16\n" +
"22\n" +
"3\n" +
"23\n" +
"14\n" +
"25\n" +
"13\n" +
"11\n" +
"12\n" +
"15\n" +
"40\n" +
"9\n" +
"-1\n" +
"EOF";
        
        String note = "\r\n\r\n---------\r\n\r\n" +
                "Pseudo-Euclidean distance\r\n\r\n" +
"The edge weight type ATT corresponds to a special \\pseudo-Euclidean\" distance function.\n" +
"Let x[i] and y[i] be the coordinates of node i. The distance between two points i and j\n" +
"is computed as follows:\r\n\r\n" +
"xd = x[i] - x[j];\n" +
"yd = y[i] - y[j];\n" +
"rij = sqrt( (xd*xd + yd*yd) / 10.0 );\n" +
"tij = nint( rij );\n" +
"if (tij<rij) dij = tij + 1;\n" +
"else dij = tij;";
        
        VediIstanza view = new VediIstanza("Att 48");
        view.setText(text + sol + note);
        
        view.setVisible(true);                      
        
    }//GEN-LAST:event_MenuIstanzaAtt48ActionPerformed

    private void MenuIstanzaBurma14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaBurma14ActionPerformed
        
        String text = "NAME: burma14\n" +
"TYPE: TSP\n" +
"COMMENT: 14-Staedte in Burma (Zaw Win)\n" +
"DIMENSION: 14\n" +
"SOL: 3323\n" +
"EDGE_WEIGHT_TYPE: GEO\n" +
"EDGE_WEIGHT_FORMAT: FUNCTION \n" +
"DISPLAY_DATA_TYPE: COORD_DISPLAY\n" +
"NODE_COORD_SECTION\n" +
"   1  16.47       96.10\n" +
"   2  16.47       94.44\n" +
"   3  20.09       92.54\n" +
"   4  22.39       93.37\n" +
"   5  25.23       97.24\n" +
"   6  22.00       96.05\n" +
"   7  20.47       97.02\n" +
"   8  17.20       96.29\n" +
"   9  16.30       97.38\n" +
"  10  14.05       98.12\n" +
"  11  16.53       97.38\n" +
"  12  21.52       95.59\n" +
"  13  19.41       97.13\n" +
"  14  20.09       94.55\n" +
"EOF\n" +
"\n" +
"\n" +
"";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "Best known solution = 3323";
        
        String note = "\r\n\r\n---------\r\n\r\n" +
                "Note:\r\n\n" +
"                Geographical distance \r\n\n" +
"If the traveling salesman problem is a geographical problem, then the nodes correspond to\n" +
"points on the earth and the distance between two points is their distance on the idealized\n" +
"sphere with radius 6378.388 kilometers. The node coordinates give the geographical lat-\n" +
"itude and longitude of the corresponding point on the earth. Latitude and longitude are\n" +
"given in the form DDD.MM where DDD are the degrees and MM the minutes. A positive lati-\n" +
"tude is assumed to be \\\\North\\\", negative latitude means \\\\South\\\". Positive longitude means\n" +
"\\\\East\\\", negative latitude is assumed to be \\\\West\\\". For example, the input coordinates for\n" +
"Augsburg are 48.23 and 10.53, meaning 48 degrees 23 minutes North and 10 degrees 53 minutes East.\n" +
"\r\n\r\nLet x[i] and y[i] be coordinates for city i in the above format. \r\nFirst the input is converted\n" +
"to geographical latitude and longitude given in radians.\n" +
"\r\n\r\nPI = 3.141592;\n" +
"deg = nint( x[i] );\n" +
"min = x[i] - deg;\n" +
"latitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"deg = nint( y[i] );\n" +
"min = y[i] - deg;\n" +
"longitude[i] = PI * (deg + 5.0 * min / 3.0 ) / 180.0;\n" +
"\r\n\r\nThe distance between two different nodes i and j in kilometers is then computed as follows:\n" +
"RRR = 6378.388;\n" +
"q1 = cos( longitude[i] - longitude[j] );\n" +
"q2 = cos( latitude[i] - latitude[j] );\n" +
"q3 = cos( latitude[i] + latitude[j] );\n" +
"dij = (int) ( RRR * acos( 0.5*((1.0+q1)*q2 - (1.0-q1)*q3) ) + 1.0);";
        
        VediIstanza view = new VediIstanza("Burma 14");
        view.setText(text + sol + note);
        
        view.setVisible(true);           
        
    }//GEN-LAST:event_MenuIstanzaBurma14ActionPerformed

    private void MenuIstanzaBayg29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaBayg29ActionPerformed
        
        String text = "NAME: bayg29\n" +
"TYPE: TSP\n" +
"COMMENT: 29 Cities in Bavaria, geographical distances (Groetschel,Juenger,Reinelt)\n" +
"DIMENSION: 29\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: UPPER_ROW \n" +
"DISPLAY_DATA_TYPE: TWOD_DISPLAY\n" +
"EDGE_WEIGHT_SECTION\n" +
" 97 205 139  86  60 220  65 111 115 227  95  82 225 168 103 266 205 149 120  58 257 152  52 180 136  82  34 145\n" +
"129 103  71 105 258 154 112  65 204 150  87 176 137 142 204 148 148  49  41 211 226 116 197  89 153 124  74\n" +
"219 125 175 386 269 134 184 313 201 215 267 248 271 274 236 272 160 151 300 350 239 322  78 276 220  60\n" +
"167 182 180 162 208  39 102 227  60  86  34  96 129  69  58  60 120 119 192 114 110 192 136 173 173\n" +
" 51 296 150  42 131 268  88 131 245 201 175 275 218 202 119  50 281 238 131 244  51 166  95  69\n" +
"279 114  56 150 278  46 133 266 214 162 302 242 203 146  67 300 205 111 238  98 139  52 120\n" +
"178 328 206 147 308 172 203 165 121 251 216 122 231 249 209 111 169  72 338 144 237 331\n" +
"169 151 227 133 104 242 182  84 290 230 146 165 121 270  91  48 158 200  39  64 210\n" +
"172 309  68 169 286 242 208 315 259 240 160  90 322 260 160 281  57 192 107  90\n" +
"140 195  51 117  72 104 153  93  88  25  85 152 200 104 139 154 134 149 135\n" +
"320 146  64  68 143 106  88  81 159 219  63 216 187  88 293 191 258 272\n" +
"174 311 258 196 347 288 243 192 113 345 222 144 274 124 165  71 153\n" +
"144  86  57 189 128  71  71  82 176 150  56 114 168  83 115 160\n" +
" 61 165  51  32 105 127 201  36 254 196 136 260 212 258 234\n" +
"106 110  56  49  91 153  91 197 136  94 225 151 201 205\n" +
"215 159  64 126 128 190  98  53  78 218  48 127 214\n" +
" 61 155 157 235  47 305 243 186 282 261 300 252\n" +
"105 100 176  66 253 183 146 231 203 239 204\n" +
"113 152 127 150 106  52 235 112 179 221\n" +
" 79 163 220 119 164 135 152 153 114\n" +
"236 201  90 195  90 127  84  91\n" +
"273 226 148 296 238 291 269\n" +
"112 130 286  74 155 291\n" +
"130 178  38  75 180\n" +
"281 120 205 270\n" +
"213 145  36\n" +
" 94 217\n" +
"162\n" +
"DISPLAY_DATA_SECTION\n" +
"   1    1150.0  1760.0\n" +
"   2     630.0  1660.0\n" +
"   3      40.0  2090.0\n" +
"   4     750.0  1100.0\n" +
"   5     750.0  2030.0\n" +
"   6    1030.0  2070.0\n" +
"   7    1650.0   650.0\n" +
"   8    1490.0  1630.0\n" +
"   9     790.0  2260.0\n" +
"  10     710.0  1310.0\n" +
"  11     840.0   550.0\n" +
"  12    1170.0  2300.0\n" +
"  13     970.0  1340.0\n" +
"  14     510.0   700.0\n" +
"  15     750.0   900.0\n" +
"  16    1280.0  1200.0\n" +
"  17     230.0   590.0\n" +
"  18     460.0   860.0\n" +
"  19    1040.0   950.0\n" +
"  20     590.0  1390.0\n" +
"  21     830.0  1770.0\n" +
"  22     490.0   500.0\n" +
"  23    1840.0  1240.0\n" +
"  24    1260.0  1500.0\n" +
"  25    1280.0   790.0\n" +
"  26     490.0  2130.0\n" +
"  27    1460.0  1420.0\n" +
"  28    1260.0  1910.0\n" +
"  29     360.0  1980.0\n" +
"EOF";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "NAME : bayg29.opt.tour\n" +
"COMMENT : Optimum solution of bayg29 (1610)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 29\n" +
"TOUR_SECTION\n" +
"1\n" +
"28\n" +
"6\n" +
"12\n" +
"9\n" +
"26\n" +
"3\n" +
"29\n" +
"5\n" +
"21\n" +
"2\n" +
"20\n" +
"10\n" +
"4\n" +
"15\n" +
"18\n" +
"14\n" +
"17\n" +
"22\n" +
"11\n" +
"19\n" +
"25\n" +
"7\n" +
"23\n" +
"8\n" +
"27\n" +
"16\n" +
"13\n" +
"24\n" +
"-1\n" +
"EOF";
        
        String note = "\r\n\r\n---------\r\n\r\n" +
                "Matrice diagonale superiore senza gli elementi della diagonale";
        
        VediIstanza view = new VediIstanza("Bayg 29");
        view.setText(text + sol + note);
        
        view.setVisible(true);              
        
    }//GEN-LAST:event_MenuIstanzaBayg29ActionPerformed

    private void MenuIstanza29ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanza29ActionPerformed
        
        String text = "NAME: bays29\n" +
"TYPE: TSP\n" +
"COMMENT: 29 cities in Bavaria, street distances (Groetschel,Juenger,Reinelt)\n" +
"DIMENSION: 29\n" +
"EDGE_WEIGHT_TYPE: EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT: FULL_MATRIX \n" +
"DISPLAY_DATA_TYPE: TWOD_DISPLAY\n" +
"EDGE_WEIGHT_SECTION\n" +
"   0 107 241 190 124  80 316  76 152 157 283 133 113 297 228 129 348 276 188 150  65 341 184  67 221 169 108  45 167\n" +
" 107   0 148 137  88 127 336 183 134  95 254 180 101 234 175 176 265 199 182  67  42 278 271 146 251 105 191 139  79\n" +
" 241 148   0 374 171 259 509 317 217 232 491 312 280 391 412 349 422 356 355 204 182 435 417 292 424 116 337 273  77\n" +
" 190 137 374   0 202 234 222 192 248  42 117 287  79 107  38 121 152  86  68  70 137 151 239 135 137 242 165 228 205\n" +
" 124  88 171 202   0  61 392 202  46 160 319 112 163 322 240 232 314 287 238 155  65 366 300 175 307  57 220 121  97\n" +
"  80 127 259 234  61   0 386 141  72 167 351  55 157 331 272 226 362 296 232 164  85 375 249 147 301 118 188  60 185\n" +
" 316 336 509 222 392 386   0 233 438 254 202 439 235 254 210 187 313 266 154 282 321 298 168 249  95 437 190 314 435\n" +
"  76 183 317 192 202 141 233   0 213 188 272 193 131 302 233  98 344 289 177 216 141 346 108  57 190 245  43  81 243\n" +
" 152 134 217 248  46  72 438 213   0 206 365  89 209 368 286 278 360 333 284 201 111 412 321 221 353  72 266 132 111\n" +
" 157  95 232  42 160 167 254 188 206   0 159 220  57 149  80 132 193 127 100  28  95 193 241 131 169 200 161 189 163\n" +
" 283 254 491 117 319 351 202 272 365 159   0 404 176 106  79 161 165 141  95 187 254 103 279 215 117 359 216 308 322\n" +
" 133 180 312 287 112  55 439 193  89 220 404   0 210 384 325 279 415 349 285 217 138 428 310 200 354 169 241 112 238\n" +
" 113 101 280  79 163 157 235 131 209  57 176 210   0 186 117  75 231 165  81  85  92 230 184  74 150 208 104 158 206\n" +
" 297 234 391 107 322 331 254 302 368 149 106 384 186   0  69 191  59  35 125 167 255  44 309 245 169 327 246 335 288\n" +
" 228 175 412  38 240 272 210 233 286  80  79 325 117  69   0 122 122  56  56 108 175 113 240 176 125 280 177 266 243\n" +
" 129 176 349 121 232 226 187  98 278 132 161 279  75 191 122   0 244 178  66 160 161 235 118  62  92 277  55 155 275\n" +
" 348 265 422 152 314 362 313 344 360 193 165 415 231  59 122 244   0  66 178 198 286  77 362 287 228 358 299 380 319\n" +
" 276 199 356  86 287 296 266 289 333 127 141 349 165  35  56 178  66   0 112 132 220  79 296 232 181 292 233 314 253\n" +
" 188 182 355  68 238 232 154 177 284 100  95 285  81 125  56  66 178 112   0 128 167 169 179 120  69 283 121 213 281\n" +
" 150  67 204  70 155 164 282 216 201  28 187 217  85 167 108 160 198 132 128   0  88 211 269 159 197 172 189 182 135\n" +
"  65  42 182 137  65  85 321 141 111  95 254 138  92 255 175 161 286 220 167  88   0 299 229 104 236 110 149  97 108\n" +
" 341 278 435 151 366 375 298 346 412 193 103 428 230  44 113 235  77  79 169 211 299   0 353 289 213 371 290 379 332\n" +
" 184 271 417 239 300 249 168 108 321 241 279 310 184 309 240 118 362 296 179 269 229 353   0 121 162 345  80 189 342\n" +
"  67 146 292 135 175 147 249  57 221 131 215 200  74 245 176  62 287 232 120 159 104 289 121   0 154 220  41  93 218\n" +
" 221 251 424 137 307 301  95 190 353 169 117 354 150 169 125  92 228 181  69 197 236 213 162 154   0 352 147 247 350\n" +
" 169 105 116 242  57 118 437 245  72 200 359 169 208 327 280 277 358 292 283 172 110 371 345 220 352   0 265 178  39\n" +
" 108 191 337 165 220 188 190  43 266 161 216 241 104 246 177  55 299 233 121 189 149 290  80  41 147 265   0 124 263\n" +
"  45 139 273 228 121  60 314  81 132 189 308 112 158 335 266 155 380 314 213 182  97 379 189  93 247 178 124   0 199\n" +
" 167  79  77 205  97 185 435 243 111 163 322 238 206 288 243 275 319 253 281 135 108 332 342 218 350  39 263 199   0\n" +
"DISPLAY_DATA_SECTION\n" +
"   1    1150.0  1760.0\n" +
"   2     630.0  1660.0\n" +
"   3      40.0  2090.0\n" +
"   4     750.0  1100.0\n" +
"   5     750.0  2030.0\n" +
"   6    1030.0  2070.0\n" +
"   7    1650.0   650.0\n" +
"   8    1490.0  1630.0\n" +
"   9     790.0  2260.0\n" +
"  10     710.0  1310.0\n" +
"  11     840.0   550.0\n" +
"  12    1170.0  2300.0\n" +
"  13     970.0  1340.0\n" +
"  14     510.0   700.0\n" +
"  15     750.0   900.0\n" +
"  16    1280.0  1200.0\n" +
"  17     230.0   590.0\n" +
"  18     460.0   860.0\n" +
"  19    1040.0   950.0\n" +
"  20     590.0  1390.0\n" +
"  21     830.0  1770.0\n" +
"  22     490.0   500.0\n" +
"  23    1840.0  1240.0\n" +
"  24    1260.0  1500.0\n" +
"  25    1280.0   790.0\n" +
"  26     490.0  2130.0\n" +
"  27    1460.0  1420.0\n" +
"  28    1260.0  1910.0\n" +
"  29     360.0  1980.0\n" +
"EOF";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "NAME : bays29.opt.tour\n" +
"COMMENT : Optimum solution of bays29 (2020)\n" +
"TYPE : TOUR\n" +
"DIMENSION : 29\n" +
"TOUR_SECTION\n" +
"1\n" +
"28\n" +
"6\n" +
"12\n" +
"9\n" +
"5\n" +
"26\n" +
"29\n" +
"3\n" +
"2\n" +
"20\n" +
"10\n" +
"4\n" +
"15\n" +
"18\n" +
"17\n" +
"14\n" +
"22\n" +
"11\n" +
"19\n" +
"25\n" +
"7\n" +
"23\n" +
"27\n" +
"8\n" +
"24\n" +
"16\n" +
"13\n" +
"21\n" +
"-1\n" +
"EOF";       
        
        VediIstanza view = new VediIstanza("Bays 29");
        view.setText(text + sol);
        
        view.setVisible(true);            
        
    }//GEN-LAST:event_MenuIstanza29ActionPerformed

    private void MenuIstanzaDantzig42ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuIstanzaDantzig42ActionPerformed
        
        String text = "NAME : dantzig42\n" +
"TYPE : TSP\n" +
"COMMENT : 42 cities (Dantzig)\n" +
"DIMENSION : 42\n" +
"SOL: 699\n" +
"EDGE_WEIGHT_TYPE : EXPLICIT\n" +
"EDGE_WEIGHT_FORMAT : LOWER_DIAG_ROW \n" +
"DISPLAY_DATA_TYPE : TWOD_DISPLAY\n" +
"EDGE_WEIGHT_SECTION\n" +
"   0   8   0  39  45   0  37  47   9   0  50  49  21  15   0  61  62  21\n" +
"  20  17   0  58  60  16  17  18   6   0  59  60  15  20  26  17  10   0\n" +
"  62  66  20  25  31  22  15   5   0  81  81  40  44  50  41  35  24  20\n" +
"   0 103 107  62  67  72  63  57  46  41  23   0 108 117  66  71  77  68\n" +
"  61  51  46  26  11   0 145 149 104 108 114 106  99  88  84  63  49  40\n" +
"   0 181 185 140 144 150 142 135 124 120  99  85  76  35   0 187 191 146\n" +
" 150 156 142 137 130 125 105  90  81  41  10   0 161 170 120 124 130 115\n" +
" 110 104 105  90  72  62  34  31  27   0 142 146 101 104 111  97  91  85\n" +
"  86  75  51  59  29  53  48  21   0 174 178 133 138 143 129 123 117 118\n" +
" 107  83  84  54  46  35  26  31   0 185 186 142 143 140 130 126 124 128\n" +
" 118  93 101  72  69  58  58  43  26   0 164 165 120 123 124 106 106 105\n" +
" 110 104  86  97  71  93  82  62  42  45  22   0 137 139  94  96  94  80\n" +
"  78  77  84  77  56  64  65  90  87  58  36  68  50  30   0 117 122  77\n" +
"  80  83  68  62  60  61  50  34  42  49  82  77  60  30  62  70  49  21\n" +
"   0 114 118  73  78  84  69  63  57  59  48  28  36  43  77  72  45  27\n" +
"  59  69  55  27   5   0  85  89  44  48  53  41  34  28  29  22  23  35\n" +
"  69 105 102  74  56  88  99  81  54  32  29   0  77  80  36  40  46  34\n" +
"  27  19  21  14  29  40  77 114 111  84  64  96 107  87  60  40  37   8\n" +
"   0  87  89  44  46  46  30  28  29  32  27  36  47  78 116 112  84  66\n" +
"  98  95  75  47  36  39  12  11   0  91  93  48  50  48  34  32  33  36\n" +
"  30  34  45  77 115 110  83  63  97  91  72  44  32  36   9  15   3   0\n" +
" 105 106  62  63  64  47  46  49  54  48  46  59  85 119 115  88  66  98\n" +
"  79  59  31  36  42  28  33  21  20   0 111 113  69  71  66  51  53  56\n" +
"  61  57  59  71  96 130 126  98  75  98  85  62  38  47  53  39  42  29\n" +
"  30  12   0  91  92  50  51  46  30  34  38  43  49  60  71 103 141 136\n" +
" 109  90 115  99  81  53  61  62  36  34  24  28  20  20   0  83  85  42\n" +
"  43  38  22  26  32  36  51  63  75 106 142 140 112  93 126 108  88  60\n" +
"  64  66  39  36  27  31  28  28   8   0  89  91  55  55  50  34  39  44\n" +
"  49  63  76  87 120 155 150 123 100 123 109  86  62  71  78  52  49  39\n" +
"  44  35  24  15  12   0  95  97  64  63  56  42  49  56  60  75  86  97\n" +
" 126 160 155 128 104 128 113  90  67  76  82  62  59  49  53  40  29  25\n" +
"  23  11   0  74  81  44  43  35  23  30  39  44  62  78  89 121 159 155\n" +
" 127 108 136 124 101  75  79  81  54  50  42  46  43  39  23  14  14  21\n" +
"   0  67  69  42  41  31  25  32  41  46  64  83  90 130 164 160 133 114\n" +
" 146 134 111  85  84  86  59  52  47  51  53  49  32  24  24  30   9   0\n" +
"  74  76  61  60  42  44  51  60  66  83 102 110 147 185 179 155 133 159\n" +
" 146 122  98 105 107  79  71  66  70  70  60  48  40  36  33  25  18   0\n" +
"  57  59  46  41  25  30  36  47  52  71  93  98 136 172 172 148 126 158\n" +
" 147 124 121  97  99  71  65  59  63  67  62  46  38  37  43  23  13  17\n" +
"   0  45  46  41  34  20  34  38  48  53  73  96  99 137 176 178 151 131\n" +
" 163 159 135 108 102 103  73  67  64  69  75  72  54  46  49  54  34  24\n" +
"  29  12   0  35  37  35  26  18  34  36  46  51  70  93  97 134 171 176\n" +
" 151 129 161 163 139 118 102 101  71  65  65  70  84  78  58  50  56  62\n" +
"  41  32  38  21   9   0  29  33  30  21  18  35  33  40  45  65  87  91\n" +
" 117 166 171 144 125 157 156 139 113  95  97  67  60  62  67  79  82  62\n" +
"  53  59  66  45  38  45  27  15   6   0   3  11  41  37  47  57  55  58\n" +
"  63  83 105 109 147 186 188 164 144 176 182 161 134 119 116  86  78  84\n" +
"  88 101 108  88  80  86  92  71  64  71  54  41  32  25   0   5  12  55\n" +
"  41  53  64  61  61  66  84 111 113 150 186 192 166 147 180 188 167 140\n" +
" 124 119  90  87  90  94 107 114  77  86  92  98  80  74  77  60  48  38\n" +
"  32   6   0                                                           \n" +
"DISPLAY_DATA_SECTION\n" +
"   1   170.0  85.0\n" +
"   2   166.0  88.0\n" +
"   3   133.0  73.0\n" +
"   4   140.0  70.0\n" +
"   5   142.0  55.0\n" +
"   6   126.0  53.0\n" +
"   7   125.0  60.0\n" +
"   8   119.0  68.0\n" +
"   9   117.0  74.0\n" +
"  10    99.0  83.0\n" +
"  11    73.0  79.0\n" +
"  12    72.0  91.0\n" +
"  13    37.0  94.0\n" +
"  14     6.0 106.0\n" +
"  15     3.0  97.0\n" +
"  16    21.0  82.0\n" +
"  17    33.0  67.0\n" +
"  18     4.0  66.0\n" +
"  19     3.0  42.0\n" +
"  20    27.0  33.0\n" +
"  21    52.0  41.0\n" +
"  22    57.0  59.0\n" +
"  23    58.0  66.0\n" +
"  24    88.0  65.0\n" +
"  25    99.0  67.0\n" +
"  26    95.0  55.0\n" +
"  27    89.0  55.0\n" +
"  28    83.0  38.0\n" +
"  29    85.0  25.0\n" +
"  30   104.0  35.0\n" +
"  31   112.0  37.0\n" +
"  32   112.0  24.0\n" +
"  33   113.0  13.0\n" +
"  34   125.0  30.0\n" +
"  35   135.0  32.0\n" +
"  36   147.0  18.0\n" +
"  37   147.5  36.0\n" +
"  38   154.5  45.0\n" +
"  39   157.0  54.0\n" +
"  40   158.0  61.0\n" +
"  41   172.0  82.0\n" +
"  42   174.0  87.0\n" +
"EOF\n";
        
        String sol = "\r\n\r\n---------\r\n\r\n" +
                "Best known solution = 699";
        
        VediIstanza view = new VediIstanza("Dantzig 42");
        view.setText(text + sol);
        
        view.setVisible(true);         
        
    }//GEN-LAST:event_MenuIstanzaDantzig42ActionPerformed

    private void MenuRefActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MenuRefActionPerformed
        
        String text = "All best known solution: http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/STSP.html"
                + "\r\n\r\nspiegazione calcolo matrice delle distanze: http://comopt.ifi.uni-heidelberg.de/software/TSPLIB95/DOC.PS ";
        
        VediIstanza view = new VediIstanza("Riferimenti TSPLib");
        view.setText(text);
        
        view.setVisible(true);                 
        
    }//GEN-LAST:event_MenuRefActionPerformed

    private void chkTettoStatiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkTettoStatiActionPerformed
        chkLBDebug.setSelected(false);
    }//GEN-LAST:event_chkTettoStatiActionPerformed

    private void chkLBDebugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkLBDebugActionPerformed
        chkTettoStati.setSelected(false);
    }//GEN-LAST:event_chkLBDebugActionPerformed

    private int[] GetLowerDiagonalMatrix(String matrix, String split)
    {        
        String[] old_elem = matrix.split(split);        
        
        String[] elem = Arrays.stream(old_elem).filter( (String s) -> 
        {
                if(s.isEmpty()) 
                {
                    return false;
                }
                else
                {
                    return true;
                }
                        
        }
                ).toArray(size -> new String[size]);
        
        int[] m = new int[elem.length];
        
        for(int i = 0; i < elem.length; i++)
        {
            m[i] = Integer.parseInt(elem[i]);
        }
        
        return m;
    }
    
    private int[] GetUpperRowMatrix(String matrix, String split) 
    {        
        String[] old_elem = matrix.split(split);        
        
        String[] elem = Arrays.stream(old_elem).filter( (String s) -> 
        {
                if(s.isEmpty()) 
                {
                    return false;
                }
                else
                {
                    return true;
                }
                        
        }
                ).toArray(size -> new String[size]);
                
        int[] m = new int[elem.length];        
        
        for(int i = 0; i < elem.length; i++)
        {
            m[i] = Integer.parseInt(elem[i]);
        }
        
        return m;
    }    
    
    private int[][] GetFullMatrix(String matrix, String split)
    {        
        String[] old_elem = matrix.split(split);        
        
        String[] elem = Arrays.stream(old_elem).filter( (String s) -> 
        {
                if(s.isEmpty()) 
                {
                    return false;
                }
                else
                {
                    return true;
                }
                        
        }
                ).toArray(size -> new String[size]);
        
        int[][] m = new int[NUM_VERTICI][NUM_VERTICI];                        
        int index = 0;
        
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            for(int j = 0; j < NUM_VERTICI; j++)
            {
                m[i][j] = Integer.parseInt(elem[index++]);  
            }
        }
        
        return m;
    }    
    
    private void TSPLibInstanceLowerDiagonal(int[] lower_diagonal)
    {
        int i = 0;
        int j = 0;
        
        //riempie la matrice dei costi (è simmetrica)
        for(int k = 0; k < lower_diagonal.length; k++)
        {
                if(lower_diagonal[k] == 0)
                {
                    cost[i][j] = NULL_EDGE;
                    i++;
                    j = 0;
                }
                else
                {
                    cost[i][j] = lower_diagonal[k];
                    cost[j][i] = lower_diagonal[k];
                    j++;
                }
        }
        
    }         
    
    private void TSPLibInstanceUpperRow(int[] upper_row)
    {
        int i = 0;
        int j = 1;
        
        int to_read = NUM_VERTICI - 1; //legge la matrice al contrario
        int cont = 0;
        
        //riempie la matrice dei costi (è simmetrica)
        for(int k = 0; k < upper_row.length; k++)
        {
                if(cont < to_read)
                {
                    cost[i][j] = upper_row[k];
                    cost[j][i] = upper_row[k];
                        j++;
                        cont++;
                }
                else
                {
                     cont = 0;
                     to_read--;
                     cost[i][i] = NULL_EDGE;
                     i++;
                     j = i+1;
                     k--;
                }
        }
        
    }             
    
    private void TSPLibInstanceATT(double[] x, double[] y) //distanza pseudo euclidea
    {
        /*
        Pseudo Euclidean Distance:
        
            xd = x[i] - x[j];
    yd = y[i] - y[j];
    rij = sqrt( (xd*xd + yd*yd)/10.0 );
    tij = aint( rij );
    if (tij<rij) dij = tij + 1;
    else dij = tij;
        */                
        
        //riempie la matrice dei costi (è simmetrica)
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            for(int j = 0; j < NUM_VERTICI; j++)
            {
                double xd = x[i] - x[j];
                double yd = y[i] - y[j];
                double rij = Math.sqrt((xd*xd + yd*yd) / 10.0);
                int tij = (int) rij;
                if(tij < rij)
                {
                    cost[i][j] = tij + 1;
                }
                else
                {
                    cost[i][j] = tij;
                }
            }                
        }
        
    }        
    
    private void TSPLibInstanceCoordinateGeo(double[] coord_x, double[] coord_y)
    {
        //se voglio usare la distanza euclidea delle coordinate originali
        Vertex[] v_cost = new Vertex[NUM_VERTICI];
        for(int i = 0; i < coord_x.length; i++)
        {
            vertici[i] = new Vertex(0, 0, i);
        }

        //assegna costi
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            for(int j = 0; j < NUM_VERTICI; j++)
            {
                if(i == j)
                {
                    cost[i][j] = NULL_EDGE;
                }
                else
                {
                    //cost[i][j] = Vertex.getDistance(vertici[i], vertici[j]);
                    //cost[i][j] = Vertex.getDistanceDouble(v_cost[i], v_cost[j]);
                    
                    //distanza fra 2 punti geografici
                    double latA = coord_x[i];
                    double lonA = coord_y[i];
                    double latB = coord_x[j];
                    double lonB = coord_y[j];
                    cost[i][j] = GeoDistance(latA, lonA, latB, lonB);
                }
            }
        }        
    }
    
    private int GeoDistance(double latA, double lonA, double latB, double lonB) //le coordinate sono in gradi
    {
        
        double R = 6378.388; //km raggio terrestre

        int gradi_latA = (int)latA;
        int gradi_latB = (int)latB;
        int gradi_lonA = (int)lonA;
        int gradi_lonB = (int)lonB;
        
        double primi_latA = latA - gradi_latA;
        double primi_latB = latB - gradi_latB;
        double primi_lonA = lonA - gradi_lonA;
        double primi_lonB = lonB - gradi_lonB;
        
        //PI * (degrees + 5*minutes/3) / 180;
        double rad_latA = Math.PI * (gradi_latA + 5*primi_latA/3)/180;
        double rad_latB = Math.PI * (gradi_latB + 5*primi_latB/3)/180;
        double rad_lonA = Math.PI * (gradi_lonA + 5*primi_lonA/3)/180;
        double rad_lonB = Math.PI * (gradi_lonB + 5*primi_lonB/3)/180;        
        
        double q1 = Math.cos(rad_lonA - rad_lonB);
        double q2 = Math.cos(rad_latA - rad_latB);
        double q3 = Math.cos(rad_latA + rad_latB);
        
        //distanza (A,B) = R * arccos(sin(latA) * sin(latB) + cos(latA) * cos(latB) * cos(lonA-lonB))
        //double distanza = R * Math.acos(Math.sin(latA_rad) * Math.sin(latB_rad) + Math.cos(latA_rad) * Math.cos(latB_rad) * Math.cos(lonA_rad - lonB_rad));
        
        int distanza = (int) ( R * Math.acos(0.5*((1.0+q1)*q2 - (1.0-q1)*q3) ) + 1.0);
        
        return distanza;
    }
    
    private TSP_Instance OpenInstance()
    {
        TSP_Instance instance = new TSP_Instance();
        
        //apre file
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle("Apri file:");
        int userSelection = fileDialog.showOpenDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION)
        {
            File toOpen = fileDialog.getSelectedFile();
            try
            {
                BufferedReader br = new BufferedReader(new FileReader(toOpen));                                
                //legge numero città:
                NUM_VERTICI = Integer.parseInt(br.readLine());
                instance.c = new int[NUM_VERTICI][NUM_VERTICI];
                //per ogni vertice, legge id, coordinate x,y
                instance.vertici = new Vertex[NUM_VERTICI];
                for(int i = 0; i < NUM_VERTICI; i++)
                {
                    String[] v = br.readLine().split(";");
                    int id = Integer.parseInt(v[0]);
                    int x = Integer.parseInt(v[1]);
                    int y = Integer.parseInt(v[2]);
                    instance.vertici[i] = new Vertex(x, y, id);
                }
                //legge la matrice dei costi
                for(int i = 0; i < NUM_VERTICI; i++)
                {
                    String[] c = br.readLine().split(";");
                    for(int j = 0; j < NUM_VERTICI; j++)
                    {
                        instance.c[i][j] = Integer.parseInt(c[j]);
                    }
                }
                br.close();
                LblCurrentInstance.setText("Istanza corrente: " + toOpen.getAbsolutePath());
                TxtNumCity.setText(String.valueOf(NUM_VERTICI));

                
            }
            catch (Exception ex)
            {
             //   log("[Errore] Durante l'apertura del'istanza\r\n" + ex.getMessage());
            }
            
        }        
        
        return instance;
    }
        
    private void SaveInstance(Vertex[] vertici, int[][] cost) 
    {
        //salva file
        JFileChooser fileDialog = new JFileChooser();
        fileDialog.setDialogTitle("Salva file:");
        int userSelection = fileDialog.showSaveDialog(this);
        if(userSelection == JFileChooser.APPROVE_OPTION)
        {
            File toSave = fileDialog.getSelectedFile();
            Writer writer = null;
            try
            {
                writer = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(toSave), "utf-8"));
                //scrivo numero vertici
                writer.write(NUM_VERTICI + "\r\n");
                //scrivo coordinate dei vertici
                for(int i = 0; i < NUM_VERTICI; i++)
                {
                    writer.write(vertici[i].getID() + ";" + vertici[i].getX() + ";" + vertici[i].getY() + "\r\n");
                }
                //scrivo matrice dei costi
                for(int i = 0; i < NUM_VERTICI; i++)
                {
                    for(int j = 0; j < NUM_VERTICI; j++)
                    {
                        writer.write(cost[i][j] + ";");
                    }
                    writer.write("\r\n");
                }
                writer.flush();
                writer.close();
                LblCurrentInstance.setText("Istanza corrente: " + toSave.getAbsolutePath());
            }
            catch (Exception ex)
            {
                //log("[Errore] Durante il salvataggio dell'istanza\r\n" + ex.getMessage());
            }
            
        }
    }
    
    private Vertex[] generateVertexes()
    {
        Vertex[] vertici = new Vertex[NUM_VERTICI];
        Random r = new Random(System.currentTimeMillis());
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            int x = r.nextInt(SCREEN_WIDTH);
            int y = r.nextInt(SCREEN_HEIGHT);
            vertici[i] = new Vertex(x,y,i);
        }
        return vertici;
    }
    
    private int[][] getCosts(Vertex[] vertici)
    {
        int[][] c = new int[NUM_VERTICI][NUM_VERTICI];
        for(int i = 0; i < NUM_VERTICI; i++)
        {
            for(int j = 0; j < NUM_VERTICI; j++)
            {
                if(i != j)
                {
                    c[i][j] = Vertex.getDistance(vertici[i], vertici[j]);
                }
                else
                {
                    c[i][j] = NULL_EDGE;
                }
            }
        }
        return c;
    }           
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BtnParameters;
    private javax.swing.JCheckBox ChkUB;
    private javax.swing.JLabel LblCurrentInstance;
    private javax.swing.JMenuItem MenuAtt48;
    private javax.swing.JMenuItem MenuBayg29;
    private javax.swing.JMenuItem MenuBays29;
    private javax.swing.JMenuItem MenuBurma14;
    private javax.swing.JMenuItem MenuDantzig42;
    private javax.swing.JMenu MenuFile;
    private javax.swing.JMenuItem MenuFri26;
    private javax.swing.JMenuItem MenuGR17;
    private javax.swing.JMenuItem MenuGR21;
    private javax.swing.JMenuItem MenuGR24;
    private javax.swing.JMenuItem MenuGenerate;
    private javax.swing.JMenuItem MenuGr48;
    private javax.swing.JMenuItem MenuIstanza29;
    private javax.swing.JMenuItem MenuIstanzaAtt48;
    private javax.swing.JMenuItem MenuIstanzaBayg29;
    private javax.swing.JMenuItem MenuIstanzaBurma14;
    private javax.swing.JMenuItem MenuIstanzaDantzig42;
    private javax.swing.JMenuItem MenuIstanzaFr26;
    private javax.swing.JMenuItem MenuIstanzaGr17;
    private javax.swing.JMenuItem MenuIstanzaGr21;
    private javax.swing.JMenuItem MenuIstanzaGr24;
    private javax.swing.JMenuItem MenuIstanzaGr48;
    private javax.swing.JMenuItem MenuIstanzaUlisse16;
    private javax.swing.JMenuItem MenuIstanzaUlisse22;
    private javax.swing.JMenuItem MenuOpen;
    private javax.swing.JMenuItem MenuRef;
    private javax.swing.JMenu MenuRisolviIstanze;
    private javax.swing.JMenuItem MenuUlisse16;
    private javax.swing.JMenuItem MenuUlisse22;
    private javax.swing.JMenu MenuVediDati;
    private javax.swing.JTextField TxtAlfaIter;
    private javax.swing.JTextField TxtAlfaMin;
    private javax.swing.JTextField TxtAlfaStart;
    private javax.swing.JTextField TxtInitPool;
    private javax.swing.JTextField TxtIterLB;
    private javax.swing.JTextField TxtIterLBDebug;
    private javax.swing.JTextField TxtNumCity;
    private javax.swing.JTextField TxtUB;
    private javax.swing.JCheckBox chkLBDebug;
    private javax.swing.JCheckBox chkTettoStati;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JTextField txtTettoStati;
    // End of variables declaration//GEN-END:variables
}
