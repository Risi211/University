The bridge pattern is a design pattern used in software engineering which is meant to "decouple an abstraction from its implementation so that the two can vary independently"

When a class varies often, the features of object-oriented programming become very useful because changes to a program's code can be made easily with minimal prior knowledge about the program. The bridge pattern is useful when both the class and what it does vary often. The class itself can be thought of as the abstraction and what the class can do as the implementation. The bridge pattern can also be thought of as two layers of abstraction.




ABSTRACTION (INTERFACE)
REFINED ABSTRACTION : ABSTRACTION

IMPLEMENTOR (INTERFACE)
CONCRETE IMPLEMENTOR : IMPLEMENTOR




IMPLEMENTOR:

	- FUNCTION 1
	- FUNCTION 2


I1 : IMPLEMENTOR
I2 : IMPLEMENTOR

----

ABSTRACTION:

	- CALL F1
	- CALL F2


A1 : ABSTRACTION

	IMPLEMENTOR IMPL;
	- CALL F1:
		IMPL.FUNCTION 1 ()
	- CALL F2:
		IMPL.FUNCTION 2 ()
